<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AT_arc124_b</title>
      <link href="/articles/at-arc124-b-sol.html/"/>
      <url>/articles/at-arc124-b-sol.html/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/AT_arc124_b">题面(洛谷)</a></p><p><a href="https://atcoder.jp/contests/arc124/tasks/arc124_b">题面(AtCoder)</a></p><!-- [在我的博客上同步推送](https://hellolin.cf/articles/at_arc124_b_sol.md) --><p>&lt;!— AtCoder Problems 评级难度：$\texttt{\color</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OI </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 详解标准模板库 STL 容器大总结</title>
      <link href="/articles/cpp-stl-containers.html/"/>
      <url>/articles/cpp-stl-containers.html/</url>
      
        <content type="html"><![CDATA[<h2 id="STL-容器-Containers"><a href="#STL-容器-Containers" class="headerlink" title="STL 容器 Containers"></a>STL 容器 Containers</h2><p>STL 叫做 <strong>标准模板库</strong>，所以 STL 容器都是模板类，声明一般是 <code>containerName&lt;typeName,...&gt; varName</code> 的形式，因容器具体需求而异。</p><h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h2><h3 id="定义和基本使用"><a href="#定义和基本使用" class="headerlink" title="定义和基本使用"></a>定义和基本使用</h3><p>迭代器 Iterator 是用来检查和访问 STL 中元素的。它相当于指针，但提供了一些有效性的检查，统一了容器访问方式。</p><p>迭代器支持两种运算符，自增 <code>++</code> 用来移动迭代器，和解引用 <code>*</code>（单目）用来访问迭代器指向的元素。</p><p>STL 容器的迭代器类型声明一般是 <code>containerName&lt;typeName,...&gt;::iterator varName</code>。</p><p>迭代器的出现使得容器的访问出现了一种新的形式（对不支持下表访问的容器很有用）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span></span>;<br><br><span class="hljs-comment">// 下标访问</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++) std::cout&lt;&lt;a[i]&lt;&lt;std::endl;<br><br><span class="hljs-comment">// 迭代器访问</span><br><span class="hljs-keyword">for</span> (std::vector&lt;<span class="hljs-type">int</span>&gt;::iterator i=a.<span class="hljs-built_in">begin</span>(); i!=a.<span class="hljs-built_in">end</span>(); i++) std::cout&lt;&lt;a[i]&lt;&lt;std::endl;<br><br><span class="hljs-comment">// auto (自 C++11)</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i=a.<span class="hljs-built_in">begin</span>(); i!=a.<span class="hljs-built_in">end</span>(); i++) std::cout&lt;&lt;a[i]&lt;&lt;std::endl;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a) std::cout&lt;&lt;x&lt;&lt;std::endl;<br></code></pre></td></tr></table></figure><h3 id="迭代器类型"><a href="#迭代器类型" class="headerlink" title="迭代器类型"></a>迭代器类型</h3><ol><li>输入迭代器 Input Iterator：拷贝、自增、解引用（访问）；</li><li>输出迭代器 Output Iterator：拷贝、自增、解引用（赋值）；</li><li>向前迭代器 Forward Iterator：拷贝、自增、解引用（访问和赋值）；</li><li>双向迭代器 Bidirectional Iterator：拷贝、自增、自减、解引用（访问和赋值）；</li><li>随机迭代器 Random Access Iterator：拷贝、自增、自减、加减、比较、解引用（访问和赋值）。</li></ol><p>不同的 STL 容器支持的迭代器不同，在使用时需要多加留意。</p><p>指针相当于随机迭代器。</p><h3 id="迭代器相关函数"><a href="#迭代器相关函数" class="headerlink" title="迭代器相关函数"></a>迭代器相关函数</h3><p>一般的 STL 容器都支持从一端或两端访问，也支持 const 常量修饰符。</p><ul><li><code>std::advance(iterator, x)</code> 将迭代器向后移动 <code>x</code> 步，若为负数则向前移动；</li><li><code>std::next(iterator)</code>(自 C++11) 获取迭代器的后继而不改变迭代器；</li><li><code>std::next(iterator, x)</code>(自 C++11) 获取迭代器的第 <code>x</code> 个后继而不改变迭代器；</li><li><code>std::prev(iterator)</code>(自 C++11) 获取迭代器的前驱而不改变迭代器；</li><li><code>std::prev(iterator, x)</code>(自 C++11) 获取迭代器的第 <code>x</code> 个前驱而不改变迭代器。</li></ul><h2 id="序列式容器-Sequence-Containers"><a href="#序列式容器-Sequence-Containers" class="headerlink" title="序列式容器 Sequence Containers"></a>序列式容器 Sequence Containers</h2><h3 id="向量-Vector"><a href="#向量-Vector" class="headerlink" title="向量 Vector"></a>向量 Vector</h3><p>在一些题目当中，如果没有给定数据范围或者普通数组会爆内存，这时可以用 <code>vector</code> 来存储。</p><p><code>vector</code> 是动态开辟的，稳定性优于普通数组，但效率低于普通数组。</p><p>可参考 <a href="https://oi-wiki.org/lang/csl/sequence-container/#vector">OI Wiki</a>。</p><h4 id="vector-的声明"><a href="#vector-的声明" class="headerlink" title="vector 的声明"></a>vector 的声明</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; a; <span class="hljs-comment">// 空 vector</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">15</span>)</span></span>; <span class="hljs-comment">// 提前开辟 15 大小的 vector，默认值是 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">c</span><span class="hljs-params">(<span class="hljs-number">15</span>, <span class="hljs-number">9</span>)</span></span>; <span class="hljs-comment">// 提前开辟 15 大小的 vector，默认值是 9</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(c)</span></span>; <span class="hljs-comment">// 将 c 复制到此 vector</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">d</span><span class="hljs-params">(move(c))</span></span>; <span class="hljs-comment">// 将 c 复制到此 vector，常数复杂度 (自 C++11)</span><br>vector&lt;<span class="hljs-type">int</span>&gt; e &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <span class="hljs-comment">// 直接将 1, 2, 3, 4, 5 赋值到此 vector 中 (自 C++11)</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; f; <span class="hljs-comment">// 两个嵌套的 vector，相当于二维数组 (C++11 以前需要在两个大于号之间加入空格)</span><br>vector&lt;<span class="hljs-type">int</span>&gt; g[<span class="hljs-number">1010</span>]; <span class="hljs-comment">// vector 数组，相当于二维数组</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<span class="hljs-type">int</span> u, v, w; &#125;;<br>vector&lt;node&gt; h; <span class="hljs-comment">// 不同类型的 vector</span><br></code></pre></td></tr></table></figure><h4 id="访问-vector"><a href="#访问-vector" class="headerlink" title="访问 vector"></a>访问 vector</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; a &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;; <span class="hljs-comment">// 自 C++11</span><br><br><span class="hljs-comment">// 下标访问，注意默认下标 0 开始</span><br>cout&lt;&lt;a.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>)&lt;&lt;endl; <span class="hljs-comment">// 成员函数 at() 下标访问</span><br>cout&lt;&lt;a[<span class="hljs-number">1</span>]&lt;&lt;endl; <span class="hljs-comment">// 运算符 [] 下标访问</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++) cout&lt;&lt;a[i]&lt;&lt;endl; <span class="hljs-comment">// 遍历</span><br><br><span class="hljs-comment">// 迭代器访问</span><br>cout&lt;&lt;*(a.<span class="hljs-built_in">begin</span>())&lt;&lt;endl; <span class="hljs-comment">// 第一个元素迭代器</span><br>cout&lt;&lt;*(a.<span class="hljs-built_in">end</span>())&lt;&lt;endl; <span class="hljs-comment">// 最后一个元素迭代器</span><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::iterator i=a.<span class="hljs-built_in">begin</span>(); i!=a.<span class="hljs-built_in">end</span>(); i++) cout&lt;&lt;*i&lt;&lt;endl; <span class="hljs-comment">// 遍历</span><br><br><span class="hljs-comment">// auto</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : a) cout&lt;&lt;x&lt;&lt;endl; <span class="hljs-comment">// 遍历</span><br></code></pre></td></tr></table></figure><h4 id="vector-常用成员函数"><a href="#vector-常用成员函数" class="headerlink" title="vector 常用成员函数"></a>vector 常用成员函数</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; a;<br><br><span class="hljs-comment">// 长度与容量</span><br>a.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">// 返回 a 是否为空，等价于 a.begin()==a.end()，也等价于 a.size()==0，true 为空，false 为非空</span><br>a.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 返回 a 的大小</span><br>a.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 将 a 的大小重新设定为 10，多退少补</span><br><br><span class="hljs-comment">// 增添、删除与赋值</span><br>a.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">// 将 a 清空</span><br>a.<span class="hljs-built_in">insert</span>(iterator, x); <span class="hljs-comment">// 在某个迭代器处插入 x 元素，线性复杂度</span><br><br></code></pre></td></tr></table></figure><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OI </tag>
            
            <tag> STL </tag>
            
            <tag> 标准模板库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022 CSP-J 游记</title>
      <link href="/articles/2022-csp-j.html/"/>
      <url>/articles/2022-csp-j.html/</url>
      
        <content type="html"><![CDATA[<h2 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h2><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>初赛</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.??.?? day-??</p></div></div><div class='timeline-item-content'><p>不能去学 <code>WHK</code> 了，专心补 <code>OI</code>。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.09.16 day-2</p></div></div><div class='timeline-item-content'><p>大脑放空，啥都没干。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.09.17 day-1</p></div></div><div class='timeline-item-content'><p>明天就要考了，好紧张。</p><p>设上了闹钟，提前把包收拾好，顺便再看了眼注意事项。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.09.18 day0</p></div></div><div class='timeline-item-content'><p>事实证明闹钟是没用的。<del>妈妈是最好的闹钟！</del></p><p>芜湖，到达考场，大巴上好开心。</p><p>坐上座位等待开始。<del>竟然没上厕所？？？</del></p><p>……</p><p>草，感觉自己考废了。</p><p>初赛过不了人预定。</p><p>大巴上好开心。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.09.19 day+1</p></div></div><div class='timeline-item-content'><p>估了下分，没脸说。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.09.27 day+9</p></div></div><div class='timeline-item-content'><p>我大山东太牛逼辣！</p><p>这就是山东速度！</p><p>还好还好！初赛过了。</p><p><img src="https://s2.loli.net/2023/01/14/epZ7NlBn2QhrP4f.png" width="100%" height="100%" /></p></div></div></div><h2 id="复赛（多图预警！流量慎入！网络慢的耐心等-）"><a href="#复赛（多图预警！流量慎入！网络慢的耐心等-）" class="headerlink" title="复赛（多图预警！流量慎入！网络慢的耐心等!）"></a>复赛（多图预警！流量慎入！网络慢的耐心等!）</h2><p>在日照真就一张图没拍啊。</p><p><img src="https://s2.loli.net/2023/01/14/LO7EqfcpdCuNyeV.png" width="50%" height="60%" /></p><div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>复赛</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.21 day-8</p></div></div><div class='timeline-item-content'><p>临沂有消息说要封城了，赶紧跑去日照蹲着。</p><p>天空真好看。</p><p><img src="https://s2.loli.net/2023/01/14/1j67CNhcykYzZQE.png" width="50%" height="60%" /></p><p>你们到底谁带谁啊。</p><p><img src="https://s2.loli.net/2023/01/14/J8rH2DvQaFmGMK9.png" width="50%" height="60%" /></p><p>一路向南，在路上啦。</p><p><img src="https://s2.loli.net/2023/01/14/2b1N9ZMSkui4JOW.png" width="50%" height="60%" /></p><p>到了到了，分分房间号早休息。</p><p><img src="https://s2.loli.net/2023/01/14/lbgBZOsPpFRxY9e.png" width="50%" height="60%" /></p><p>生煎真好吃。</p><p><img src="https://s2.loli.net/2023/01/14/fjEGXzHSVhsIiWD.png" width="50%" height="60%" /></p><p><del>呃呃，结果临沂封城是谣言……虚惊一场……</del></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.22 day-7</p></div></div><div class='timeline-item-content'><p>起床啦，迎接今天的模拟赛。</p><p><img src="https://s2.loli.net/2023/01/14/nshZ1kYP7zqtKwB.png" width="50%" height="60%" /></p><p>附一张成绩表，我考了个什么啊。</p><p><img src="https://s2.loli.net/2023/01/14/nxYKs1L5lyqZXi9.png" width="50%" height="60%" /></p><p><del>老师走之前没来得及回家，带的台式机，所以用我的机器评测！</del></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.23 day-6</p></div></div><div class='timeline-item-content'><p>又起床啦，迎接今天的模拟赛。</p><p><img src="https://s2.loli.net/2023/01/14/14PvgcxaQpWYVF8.png" width="50%" height="60%" /></p><p>成绩表找不到了，反正考得很烂。</p><p>杨焜祁生日快乐！<del>我要 <code>RGB(255, 255, 255)</code> 颜色的蛋糕！</del></p><p><img src="https://s2.loli.net/2023/01/14/OJ7W8PdlBYeGmUz.png" width="50%" height="60%" /></p><p><del>照片上的我好憨啊不知道为啥……</del></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.24 day-5</p></div></div><div class='timeline-item-content'><p>起床。</p><p><img src="https://s2.loli.net/2023/01/14/NxsecUzilH7hD8b.png" width="50%" height="60%" /></p><p>啊，又是考得稀烂的一天。</p><p><img src="https://s2.loli.net/2023/01/14/cjJ48GaHKeEZ72Y.png" width="50%" height="60%" /></p><p>激烈讨论……</p><p><img src="https://s2.loli.net/2023/01/14/Zu2cz6rVh4Ep7JM.png" width="50%" height="60%" /></p><p>李艾洋秃了。</p><p><img src="https://s2.loli.net/2023/01/14/kodybnc2lUXYH1s.png" width="50%" height="60%" /></p><p><img src="https://s2.loli.net/2023/01/14/rNPcQkxZVLosBD8.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.25 day-4</p></div></div><div class='timeline-item-content'><p>起床。</p><p><img src="https://s2.loli.net/2023/01/14/OiUPqIQKnH9TeCB.png" width="50%" height="60%" /></p><p><img src="https://s2.loli.net/2023/01/14/INVUlYXtMnaA7Cp.png" width="50%" height="60%" /></p><p>羊汤真的很好喝。</p><p><img src="https://s2.loli.net/2023/01/14/KhfoUlOm7rI9cj6.png" width="50%" height="60%" /></p><p>我什么时候成新建文件夹了？？？</p><p>嗯？？？</p><p><img src="https://s2.loli.net/2023/01/14/XlvyACfnKkVp8Od.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.26 day-3</p></div></div><div class='timeline-item-content'><blockquote><p><strong>大惊喜！复赛取消啦！</strong></p></blockquote><p><del>$\texttt{CCF}$ 你该死啊！</del></p><p>额嗯，模拟赛还是要打的。</p><p><img src="https://s2.loli.net/2023/01/14/nGZmbLAjeRzKyFH.png" width="50%" height="60%" /></p><p>我出息了。<del>虽然还是叫新建文件夹，怀疑老师故意玩梗，奶奶滴（指夏德峻的 U 盘卷标）</del></p><p><img src="https://s2.loli.net/2023/01/14/W3X4LrjgyF8ovt7.png" width="50%" height="60%" /></p><p><img src="https://s2.loli.net/2023/01/14/WlzJbLFo7ecIZyr.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.27 day-2</p></div></div><div class='timeline-item-content'><p>再见，日照。</p><p>海边真好玩，又凉爽，又能喝奶茶 <del>，还能和 ZZY 一起出题，哈哈</del>。</p><p><img src="https://s2.loli.net/2023/01/14/ibt3e5yMKQzXHmY.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.28 day-1</p></div></div><div class='timeline-item-content'><p>在家打模拟赛。</p><p><img src="https://s2.loli.net/2023/01/14/NafqMjoX3IkRn18.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.29 day0</p></div></div><div class='timeline-item-content'><p>唉，只能在家自测了。错过再等一年。</p><p><img src="https://s2.loli.net/2023/01/14/R9K4TEXqxQFMweY.png" width="50%" height="60%" /></p><p>我好菜。</p><p><img src="https://s2.loli.net/2023/01/14/PjFKiBsr1p8JySv.png" width="50%" height="60%" /></p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022.10.30 day+1</p></div></div><div class='timeline-item-content'><p>做题，讲题。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023.01.14 day+懒得算</p></div></div><div class='timeline-item-content'><p>心血来潮写篇游记，害，没啥可记的。</p></div></div></div><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>听说 $3$ 月份会组织重新考复赛，不知道是不是真的。</p>]]></content>
      
      
      <categories>
          
          <category> 其他内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OI </tag>
            
            <tag> CSP-J </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMWare Workstation 虚拟机安装 macOS Monterey 实录</title>
      <link href="/articles/vmware-macos12.html/"/>
      <url>/articles/vmware-macos12.html/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>准备安装 <code>VMWare Workstaion</code> 并进行基本配置，这里不作说明；</li><li>下载 <code>Unlocker</code>，下载并解压后，先结束掉所有与 <code>VMWare</code> 有关的进程（含有 <code>VMWare</code> 的一律结束），<code>Windows</code> 用户执行目录下的 <code>windows\unlock.exe</code>，<code>Linux</code> 用户执行目录下的 <code>linux\unlock</code>，等待出现成功信息；</li><li>下载 <code>Beamoff</code> 优化虚拟机性能，这个待会要放在 <code>macOS</code> 里，仅仅下载就好了。</li></ol><a class="tag-Link" target="_blank" href=" https://github.com/DrDonk/unlocker/releases/latest">    <div class="tag-link-tips">链接跳转至站外，请注意隐私安全</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ https://github.com/DrDonk/unlocker/releases/latest.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Unlocker</div>            <div class="tag-link-sitename"> Unlocker 下载</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><a class="tag-Link" target="_blank" href=" /assets/beamoff.zip">    <div class="tag-link-tips">链接跳转至站外，请注意隐私安全</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="background-image: url(https://api.iowen.cn/favicon/ /assets/beamoff.zip.png);"></div>        <div class="tag-link-right">            <div class="tag-link-title">Beamoff</div>            <div class="tag-link-sitename"> Beamoff 下载</div>        </div>        <i class="fa-solid fa-angle-right"></i>    </div>    </a><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2>]]></content>
      
      
      <categories>
          
          <category> 折腾日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMWare </tag>
            
            <tag> 虚拟机 </tag>
            
            <tag> 系统 </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七年级上册中国历史总复习</title>
      <link href="/articles/grade-7-term-1-history.html/"/>
      <url>/articles/grade-7-term-1-history.html/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>以下是原文。</p></div><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本复习提纲由 <a href="#">Hellolin</a> 和 <a href="https://www.cnblogs.com/9-1-11-9-15-9/">Diamond_plus</a> 共同整理完成。</p><p><a href="#">Hellolin</a> 负责18课-20课的文字整理记述，<a href="https://www.cnblogs.com/9-1-11-9-15-9/">Diamond_plus</a> 负责1课-17课的文字记述和全文的排版整理。</p><p>本文是在期末考试前3天整理，可以说是极其仓促，内容和排版多有不当之处，欢迎读者致邮 <code>hellolinoi@outlook.com</code>，我们真诚接纳您关于本文任何方面的宝贵建议。</p><h2 id="史前时期：中国境内早期人类与文明的起源"><a href="#史前时期：中国境内早期人类与文明的起源" class="headerlink" title="史前时期：中国境内早期人类与文明的起源"></a>史前时期：中国境内早期人类与文明的起源</h2><ul><li>黄河流域、长江流域和辽河流域的考古发现，证实了中华文明的起源及发展具有 $ \color{red}{多元一体} $ 的特征。</li><li>考古学者根据发掘的古人类化石进行研究，发现人类是由古猿逐渐进化而来的。</li><li>史前时期，即无文字记载的时代</li></ul><h3 id="中国境内的早期人类文明"><a href="#中国境内的早期人类文明" class="headerlink" title="中国境内的早期人类文明"></a>中国境内的早期人类文明</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul><li>我国是世界上发现古人类遗址最多的国家之一。</li><li>最具代表性的早期人类是元谋人、北京人和山顶洞人。</li><li>化石是研究远古人类历史的重要证据。</li><li>人和动物的本质区别是会不会生产、制造工具</li></ul><ol><li>距今 $ \color{aqua}{300万} $ 年左右，古猿 $ \rightarrow $ 直立人。</li><li>距今 $ \color{aqua}{20万} $ 年左右，直立人 $ \rightarrow $ 早期智人。</li><li>距今 $ \color{aqua}{5万} $ 年左右，早期智人 $ \rightarrow $ 晚期智人（现代人）</li></ol><h4 id="元谋人"><a href="#元谋人" class="headerlink" title="元谋人"></a>元谋人</h4><ul><li>地点：云南省元谋县。</li><li>生产生活痕迹与工具：远古人类的两颗门齿化石、粗糙石器、碳屑和烧骨。</li><li>生活时间：距今约 $ \color{aqua}{170万} $ 年。</li><li>地位：我国境内目前已确认的最早的古人类。</li><li>生产生活：能够制作工具，知道使用火。</li></ul><h4 id="北京人"><a href="#北京人" class="headerlink" title="北京人"></a>北京人</h4><ul><li>地点：北京西南周口店龙骨山</li><li>这处遗址于 $ \color{aqua}{1921} $ 年首次被发现， $ \color{aqua}{1929} $ 年，中国青年学者裴文中发现第一个北京人头盖骨化石。</li><li>生活时间：距今 $ \color{aqua}{70万} $ 年~ $ \color{aqua}{20万} $ 年。</li><li>生产生活痕迹与工具：用石块，兽骨和鹿角等制作各类工具，制作石器的技术比较成熟，采用不同的打制方法。使用打制石器的时代叫做“旧石器时代”。</li><li>生产生活：用工具猎取猎物；采集植物果实；结成群体生活；长时间保存火种</li><li>意义：学会用火是人类进化史上的里程碑</li><li>地位：<ul><li>北京人是世界上最重要的原始人类之一，这一发现对于研究古人类进化的历史具有重要的意义。</li><li>周口店北京人一直是迄今所知世界上内涵最丰富， 材料最齐全的直立人遗址之一。</li></ul></li></ul><h4 id="山顶洞人"><a href="#山顶洞人" class="headerlink" title="山顶洞人"></a>山顶洞人</h4><ul><li>时间：距今约 $ \color{aqua}{3万} $ 年。</li><li>地点：周口店龙骨山顶部的洞穴。</li><li>发现时间： $ \color{aqua}{1930} $ 年。</li><li>生产生活：<ul><li>掌握磨光和钻孔技术</li><li>人工取火，采集，捕鱼狩猎，缝制衣服，交换生活用品</li><li>有爱美意识，会埋葬逝者</li><li>集体生活社会</li></ul></li></ul><h4 id="碳-14-年代测定"><a href="#碳-14-年代测定" class="headerlink" title="碳-14 年代测定"></a>碳-14 年代测定</h4><ul><li>半衰期： $ \color{aqua}{5730} $ 年。</li><li>方法原理：凡是和大气中 $ CO_2 $ 进行过直接间接交换的含碳物质，都包含碳-14，一旦生命过程终止，交换活动即结束。</li><li>方法：测定当前标本现存的碳-14 水平值，与原有水平值比对，利用半衰数学模型反演出停止交换的时间，即为死亡时间。</li><li>方法局限性：只能测定 5 万年以内的生物体。</li></ul><h3 id="原始农耕社会"><a href="#原始农耕社会" class="headerlink" title="原始农耕社会"></a>原始农耕社会</h3><h4 id="原始农业的发展"><a href="#原始农业的发展" class="headerlink" title="原始农业的发展"></a>原始农业的发展</h4><ul><li>大约 $ \color{aqua}{20000} $ 年前，先民开始对野生植物进行管理，约 $ \color{aqua}{10000} $ 年前，中华大地进入新石器时代，长江中下游的先民们开始栽培稻，北方地区的先民开始栽培粟和黍。</li><li>使用磨制时期的时代叫做新石器时代</li><li>地位：目前世界上最糟的栽培稻、粟和黍均发现于中国。稻、粟和黍的人工栽培，是我们祖先为人类文明作出的重要贡献。</li><li>东胡林遗址出土的谈话粟和黍</li><li>贾湖遗址出土碳化稻粒、刻符龟甲和骨笛。</li><li>经过 $ \color{aqua}{2000} $ 多年的发展，稻作和粟作农作物在我国南北方逐渐推广。</li><li>农作物种植，家畜饲养的出现以及聚落、磨制石器的发展，是原始农业兴起和发展的重要标志。原始农业为古代文明社会的形成奠定了重要的物质基础。</li></ul><h4 id="河姆渡遗址"><a href="#河姆渡遗址" class="headerlink" title="河姆渡遗址"></a>河姆渡遗址</h4><ul><li>时间：距今约 $ \color{aqua}{7000} $ 年。</li><li>地理位置：浙江余姚河姆渡，长江中下游古代人类活动遗址的代表。</li><li>房屋：干栏式建筑</li><li>生产生活：<ul><li>农业<ul><li>最早的木结构水井</li><li>农作物：水稻</li><li>农业工具：骨耜</li></ul></li><li>畜牧业：猪，狗，水牛</li><li>手工业<ul><li>陶器，玉器和骨哨（猪纹陶钵）</li><li>中国已知最早象牙雕刻</li><li>天然漆</li></ul></li></ul></li></ul><h4 id="半坡遗址"><a href="#半坡遗址" class="headerlink" title="半坡遗址"></a>半坡遗址</h4><ul><li>时间：距今约 $ \color{aqua}{6000} $ 年</li><li>地理位置：陕西西安东部半坡村一带，黄河流域古代人类活动遗址的代表。</li><li>房屋：半地穴式圆形房屋</li><li>生产生活：<ul><li>食物来源（渔猎为主）：<ul><li>用鱼叉、鱼钩、渔网捕鱼</li><li>用弓箭、长矛、石球捕猎斑鹿等</li><li>有时采集野果作补充</li></ul></li><li>农业：<ul><li>生产工具： 制造骨器，角器等生产工具来开垦土地</li><li>农作物：粟</li></ul></li><li>畜牧业：猪、狗</li><li>手工业：<ul><li>彩陶</li><li>纺织、制衣</li></ul></li></ul></li></ul><h4 id="良渚遗址"><a href="#良渚遗址" class="headerlink" title="良渚遗址"></a>良渚遗址</h4><ul><li>时间：距今约 $ \color{aqua}{5300} $ ~ $ \color{aqua}{4300} $ 年， $ \color{aqua}{1936} $ 年发现</li><li>意义：<ul><li>距今约 $ \color{aqua}{5000} $ 年左右，长江下游地区已经出现早期国家，进入了文明社会，阶级分化相当明显。</li><li>被列入《世界遗产名录》</li><li>是同时期世界上规模最大的水利工程</li></ul></li><li>主要产物：玉</li></ul><h3 id="原始社会晚期"><a href="#原始社会晚期" class="headerlink" title="原始社会晚期"></a>原始社会晚期</h3><h4 id="传说与史实的区别"><a href="#传说与史实的区别" class="headerlink" title="传说与史实的区别"></a>传说与史实的区别</h4><ul><li>联系：客观现实 $ \stackrel{加工}{\longrightarrow} $ 传说</li><li>区别：史实 $ \stackrel{经过证实}{\longleftarrow} $ 传说 $ \stackrel{夸张虚构}{\longrightarrow} $ 神话</li></ul><h4 id="创文明"><a href="#创文明" class="headerlink" title="创文明"></a>创文明</h4><p>时间：距今 $ \color{aqua}{8000} $ ~ $ \color{aqua}{6000} $ 年</p><ul><li>炎帝<ul><li>开垦耕种</li><li>制作生产工具</li><li>种植五谷和蔬菜</li><li>制作陶器</li><li>发明纺织</li><li>会煮盐</li><li>制作乐器</li><li>天文和历法知识</li></ul></li><li>黄帝（名轩辕）<ul><li>建造宫室</li><li>制作衣裳</li><li>挖掘水井</li><li>制造船只</li><li>会炼铜</li><li>发明弓箭</li><li>仓颉造字</li><li>伶伦制音</li><li>隶首发明算盘</li><li>嫘祖擅长纺织</li></ul></li><li>河南、陕西、山西、甘肃、浙江等地发掘出的独木舟、骨笛、蚕茧和丝织品，反映了我国原始社会晚期的 社会发展水平。</li></ul><h4 id="融部族"><a href="#融部族" class="headerlink" title="融部族"></a>融部族</h4><ul><li>时间： $ \color{aqua}{五六千} $ 年前，中国进入部落联盟时期。</li><li>主要部落（3 个）：炎帝、黄帝和蚩尤。</li><li>主要战役：<ul><li>阪泉之战<ul><li>交战双方：炎帝部落与黄帝部落</li><li>交战结果：炎帝失败，归顺黄帝，结成联盟</li></ul></li><li>涿鹿之战<ul><li>交战双方：炎黄联盟和蚩尤部落</li><li>交战结果：炎黄联盟大败蚩尤，黄帝被推举为部落联盟首领。</li></ul></li></ul></li><li>意义：这一部落联盟以后逐渐形成为华夏族，因此后人尊崇炎帝和黄帝为中华民族的人文初祖，海内外华人也以“炎黄子孙”自称。</li></ul><h4 id="立制度"><a href="#立制度" class="headerlink" title="立制度"></a>立制度</h4><ul><li>黄帝之后黄河流域有许多部族，陶唐氏、有虞氏和夏后氏三个部族结成联盟，尧舜禹依次成为联盟的首领。</li><li>禅让制<ul><li>概念：即将联盟首领的位子传给贤德之人</li><li>尧：尧鼓励人民开垦农田、发展历法、适时耕种。</li><li>舜：制定刑法、完善制度、稳定局势、派禹治水、解除水患。</li><li>禹：其父鲧治水采用堵的方法，失败；禹采用疏导的办法，“三过家门而不入”，治水成功，被尊称为“大禹”。</li></ul></li></ul><h2 id="夏商周时期：早期国家与社会变革"><a href="#夏商周时期：早期国家与社会变革" class="headerlink" title="夏商周时期：早期国家与社会变革"></a>夏商周时期：早期国家与社会变革</h2><h3 id="夏朝的建立与家天下"><a href="#夏朝的建立与家天下" class="headerlink" title="夏朝的建立与家天下"></a>夏朝的建立与家天下</h3><ul><li>建立过程：禹的儿子启凭借强大实力继承了禹的位置。</li><li>时间：约公元前 $ \color{aqua}{2070} $ 年</li><li>建立者：禹</li><li>都城：阳城</li><li>主要事件<ul><li>世袭制代替禅让制，即王位、爵号和财产按照家族血缘关系世代继承下去</li><li>王朝后期的一座都城遗址——二里头遗址：大型墓葬群和手工业作坊，平民生活区和墓葬群，反映出夏王朝的阶级分化和等级界限。出土多种宝石玉石。</li></ul></li><li>衰落：夏王桀统治残暴，搜刮民财。</li></ul><h3 id="商朝"><a href="#商朝" class="headerlink" title="商朝"></a>商朝</h3><ul><li>建立过程：商的首领汤联络河北河南一带部族，起兵攻夏王桀，桀大败，夏亡。史称“商汤灭夏”。</li><li>建立时间：约公元前 $ \color{aqua}{1600} $ 年</li><li>建立者：汤</li><li>都城：亳</li><li>主要事件<ul><li>商王汤任用贤才，发展农业，手工业和商业。经济发展，社会安定。</li><li>受战乱、环境变化等因素的影响，多次迁都，最后一次大规模迁都是商王盘庚迁都至殷，史称“盘庚迁殷”。</li></ul></li><li>衰落：商纣王滥用酷刑，对外征伐，征收苛税，封建奴隶制使得社会矛盾日趋尖锐。</li></ul><h3 id="西周"><a href="#西周" class="headerlink" title="西周"></a>西周</h3><ul><li>建立过程：陕西渭水周原一代周部族以农业强国，周武王得到吕尚周公辅佐，日益强盛。武王在牧野与商军决战，周军占领商都，商亡。史称“牧野之战”。</li><li>建立时间：公元前 $ \color{aqua}{1046} $ 年</li><li>建立者：周武王</li><li>都城：镐京</li></ul><h4 id="建立分封制"><a href="#建立分封制" class="headerlink" title="建立分封制"></a>建立分封制</h4><ul><li>阶级：天子，诸侯，卿大夫，士，民，奴隶。</li><li>诸侯义务：向周王进贡，服从周王调兵</li><li>诸侯权利：在自己的封地之内再分封</li><li>意义：保证了周王室对地方的控制，稳定了政局，扩大了统治范围。</li><li>对象：宗亲和功臣，根据血缘关系和功劳大小分封</li></ul><h4 id="周厉王与民争利"><a href="#周厉王与民争利" class="headerlink" title="周厉王与民争利"></a>周厉王与民争利</h4><ul><li>时间：公元前 $ \color{aqua}{841} $ 年</li><li>结果：引起“国人暴动”，厉王逃亡</li></ul><h4 id="衰落"><a href="#衰落" class="headerlink" title="衰落"></a>衰落</h4><p>周幽王执政不力，朝政腐败，日渐衰落，西周被犬戎所灭，周平王东迁洛邑，建立东周，史称“平王东迁”。</p><h3 id="青铜器"><a href="#青铜器" class="headerlink" title="青铜器"></a>青铜器</h3><ul><li>概述：我国黄河流域的多个遗址出土了距今 $ \color{aqua}{5000} $ ~ $ \color{aqua}{4000} $ 年的铜器。商朝以后，青铜器数量增多，种类丰富，成为王公贵族身份地位乃至国家权力的象征，其类型和数量反映了权力的大小和严格的等级界限。</li><li>等级使用<ul><li>鼎和簋配合使用，鼎为奇数，簋=鼎-1。</li><li>天子：九鼎八簋</li><li>诸侯：七鼎六簋</li><li>卿大夫：五鼎四簋</li><li>士：三鼎两簋</li></ul></li><li>铸造技术：采用泥范铸造法，包括制模、雕刻纹饰、翻制泥范、高温焙烧、浇筑液态金属、加工修整等工序。</li><li>发展：商周时期的青铜器种类丰富、数量众多、制作工艺高超，商代后期，青铜铸造业不仅规模宏大，而且组织严密，分工细致，能够铸造出大型器物。</li><li>代表：<ul><li>四羊方尊</li><li>三星堆青铜面具</li><li>司母戊鼎<ul><li>重量：800 多千克</li><li>地位：迄今世界上出土的最重的青铜器。</li></ul></li></ul></li></ul><h3 id="甲骨文"><a href="#甲骨文" class="headerlink" title="甲骨文"></a>甲骨文</h3><ul><li>概述：甲骨文是中国商周时期刻写在龟甲和牛羊等兽骨上的文字。共出土约 15 万片，单字计 4400 余个，甲骨文已经具备了汉字的基本结构，分、分、是汉字形成与发展的重要阶段。</li><li>首次发现：清朝人王懿荣于 $ \color{aqua}{1899} $ 年首次发现。</li><li>地位：是中国已发现的古代文字中年代最早，体系较为完整的文字，对中国文字的形成与发展有深远的影响。</li><li>造字特点：象形、指示、会意、形声、假借等多种造字方法。其中以形声最为进步。</li></ul><h3 id="东周"><a href="#东周" class="headerlink" title="东周"></a>东周</h3><h4 id="春秋时期"><a href="#春秋时期" class="headerlink" title="春秋时期"></a>春秋时期</h4><ul><li>时间：公元前 $ \color{aqua}{770} $ 年~公元前 $ \color{aqua}{476} $ 年，因孔子编年体史书《春秋》得名。</li><li>经济：铁制农具和牛耕出现，为开发山林、扩大耕地创造条件。铁制农具和牛耕的出现使新兴地主阶级出现，是春秋时期农业生产力水平提高的重要标志。金属货币被更多使用。</li><li>周天子地位衰微，大的诸侯势力崛起，分封制逐渐瓦解</li></ul><h5 id="诸侯争霸"><a href="#诸侯争霸" class="headerlink" title="诸侯争霸"></a>诸侯争霸</h5><ul><li>以“尊王攘夷”的名义征战，争夺霸主地位</li><li>齐桓公、晋文公、秦穆公、楚庄王等先后称霸，到春秋末期，长江下游的吴国和越国也先后北上争霸</li><li>齐桓公：任用管仲为相，使齐国经济和军事实力大为提高，打着“尊天子，攘四夷”的旗号，号令诸侯，成为春秋时期的第一个霸主。</li><li>在春秋争霸的过程中，出现了大规模的民族交融。</li><li>利：促进民族交融，政权统一</li><li>弊：连年战争，民不聊生</li><li>步兵逐渐成为军队的主体</li></ul><h4 id="战国时期"><a href="#战国时期" class="headerlink" title="战国时期"></a>战国时期</h4><ul><li>时间：公元前 $ \color{aqua}{475} $ 年~公元前 $ \color{aqua}{221} $ 年，因《战国策》得名。</li><li>概述：中国历史上的一些著名战役，如马陵之战、桂陵之战、长平之战等都发生在战国时期。无论统治者采取什么措施，其根本目的都是巩固统治。</li><li>三家分晋：战国初年，晋国被韩赵魏三家大夫瓜分，史称“三家分晋”，同时也标志着战国时期的开始。</li><li>战国七雄：韩赵魏楚燕齐秦</li><li>秦国经过商鞅变法实力日渐强大</li></ul><h5 id="商鞅变法"><a href="#商鞅变法" class="headerlink" title="商鞅变法"></a>商鞅变法</h5><ul><li>时间：公元前 $ \color{aqua}{356} $ 年</li><li>人物：秦孝公任用商鞅变法，新兴地主阶级主张变法。</li><li>内容：<ul><li>政治上<ul><li>确立县制，由国君直接派官吏治理</li><li>废除贵族的世袭特权</li><li>改革户籍制度 ，加强对人民的管理</li><li>严明法度，禁止私斗</li></ul></li><li>经济上：<ul><li>废除井田制，允许土地自由买卖</li><li>鼓励耕织，生产粮食、布帛多的人可以免除徭役</li><li>统一度量衡</li></ul></li><li>军事上：奖励军功，对有军功者授予爵位并赏赐土地。</li></ul></li><li>成功的原因：顺应历史潮流</li><li>影响：使秦国的国力大为增强，提高了军队的战斗力，一跃成为最强盛的诸侯国，为以后秦国统一全国奠定了基础。</li></ul><h5 id="都江堰"><a href="#都江堰" class="headerlink" title="都江堰"></a>都江堰</h5><ul><li>时间：公元前 $ \color{aqua}{256} $ 年</li><li>位置：秦国，成都岷江附近。</li><li>建造者：李冰父子</li><li>功能：防洪，灌溉，水运</li><li>主体工程：<ul><li>渠首<ul><li>鱼嘴：江心分水堤坝，将岷江分成内江和外江。内江用于灌溉，外江用于分洪。</li><li>宝瓶口：内江下游出水口，引流入灌溉网。</li><li>飞沙堰：鱼嘴与宝瓶口之间的滚水坝，分洪，减少泥沙淤积</li></ul></li><li>灌溉网：灌溉农田</li></ul></li><li>影响：建成之后，成都平原成为沃野，被称为“天府之国”。</li></ul><h4 id="百家争鸣"><a href="#百家争鸣" class="headerlink" title="百家争鸣"></a>百家争鸣</h4><ul><li>概念：春秋战国时期思想繁荣的局面史称“百家争鸣”</li></ul><h5 id="道家"><a href="#道家" class="headerlink" title="道家"></a>道家</h5><ul><li>老子<ul><li>时代：春秋后期楚国人</li><li>原名李耳，创立道家。</li><li>政治主张：无为而治</li><li>著作：《道德经》（即《老子》）</li><li>重要思想：从正反两方面看待问题</li></ul></li><li>庄子<ul><li>时代：战国后期宋国人</li><li>原名庄周，发展老子思想</li><li>政治主张：顺应自然和民心。</li><li>著作：《庄子》</li><li>重要思想：人生应追求精神自由，保持独立人格</li></ul></li></ul><h5 id="儒家"><a href="#儒家" class="headerlink" title="儒家"></a>儒家</h5><ul><li>孔子<ul><li>时代：春秋后期鲁国人</li><li>原名孔丘，出身下层贵族，创立儒家，床</li><li>政治主张：以德治国</li><li>著作：《春秋》《论语》（后人整理）</li><li>重要思想：仁，有教无类，因材施教。</li></ul></li><li>孟子<ul><li>时代：战国后期邹国人</li><li>原名孟轲</li><li>政治主张：仁政</li><li>著作：《孟子》</li><li>重要思想：民贵君轻，反对一切非正义的战争</li></ul></li><li>荀子<ul><li>主张礼治，明确尊卑等级</li></ul></li></ul><h5 id="法家"><a href="#法家" class="headerlink" title="法家"></a>法家</h5><ul><li>墨子<ul><li>墨家创始人</li><li>政治主张：兼爱、非攻、节俭</li></ul></li><li>韩非子：<ul><li>战国末期法家集大成者</li><li>政治主张：以法治国，反对空谈仁义，靠法术势治国、建立中央集权专制统治。</li></ul></li></ul><p>意义：百家争鸣促进了思想和学术的繁荣，成为中国古代第一次思想文化发展的高潮，为中国古代文化的发展奠定了基础。</p><h2 id="秦汉时期：统一多民族国家的建立和巩固"><a href="#秦汉时期：统一多民族国家的建立和巩固" class="headerlink" title="秦汉时期：统一多民族国家的建立和巩固"></a>秦汉时期：统一多民族国家的建立和巩固</h2><h3 id="秦朝"><a href="#秦朝" class="headerlink" title="秦朝"></a>秦朝</h3><ul><li>建立过程：公元前 $ \color{aqua}{230} $ 年，开始兼并全国的战争，先后攻陷韩赵魏楚燕齐六国</li><li>建立时间：公元前 $ \color{aqua}{221} $ 年</li><li>建立者：嬴政，史称秦始皇，中国第一位皇帝。</li><li>都城：咸阳</li><li>疆域：东到东海，西到陇西，北至长城，南达南海。</li><li>意义：建立了我国历史上第一个统一的多民族国家。</li></ul><h4 id="中央集权制度："><a href="#中央集权制度：" class="headerlink" title="中央集权制度："></a>中央集权制度：</h4><ul><li>原因：为加强对全国的统治，秦朝创立了大一统的中央集权制度</li><li>国家的最高统治者称为皇帝，拥有至高无上的权威，总览全国的一切军政大权。</li><li>皇帝之下设中央政权机构：<ul><li>丞相：掌管行政</li><li>太尉：掌管军事</li><li>御史大夫：掌管监察</li></ul></li></ul><h4 id="郡县制"><a href="#郡县制" class="headerlink" title="郡县制"></a>郡县制</h4><ul><li>形式：由中央直接管辖郡，郡下设县，县的长官称县令或县长，长官都由朝廷直接任免。</li><li>作用：加强中央对地方的控制</li><li>意义：开创了此后我国历代王朝地方行政的基本形式</li></ul><h4 id="巩固统一的措施"><a href="#巩固统一的措施" class="headerlink" title="巩固统一的措施"></a>巩固统一的措施</h4><ul><li>文化方面<ul><li>举措：统一文字为小篆</li><li>意义：有利于文化的交流</li></ul></li><li>经济方面<ul><li>举措：统一货币为圆形方孔半两钱，统一度量衡。</li><li>意义：促进各地经济的交流与发展。</li></ul></li><li>军事方面<ul><li>举措：修筑长城（北），北击匈奴（蒙恬），统一岭南及东南沿海地区。</li><li>意义：拓展疆域，巩固统治。</li></ul></li><li>交通方面<ul><li>举措：开凿灵渠，统一车辆和道路的宽窄。</li><li>意义：建成以后完善秦国的陆路交通网和水运网，使全国交流更为畅通。</li></ul></li></ul><h4 id="衰亡（陈胜吴广大起义）"><a href="#衰亡（陈胜吴广大起义）" class="headerlink" title="衰亡（陈胜吴广大起义）"></a>衰亡（陈胜吴广大起义）</h4><ul><li>时代背景<ul><li>秦的统治具有急于求成和暴虐的特点，收苛税，重徭役，用酷刑，三税二。修建骊山陵和阿房宫役使大量人口，农民阶级受到剥削和压迫，社会经济遭到严重破坏。</li><li>秦始皇下令销毁百家书籍，坑杀儒生，史称“焚书坑儒”。</li></ul></li><li>时间：公元前 $ \color{aqua}{209} $ 年。</li><li>人物：陈胜、吴广带领大量农民</li><li>口号：王侯将相宁有种乎</li><li>过程：<ul><li>1.征发去渔阳戍守长城，走到大泽乡遇大雨，按秦律戍守误期死罪，众农民便揭竿而起。</li><li>2.攻占陈县，建立“张楚政权”。</li><li>3.主力西逼咸阳，被秦军主力所灭。</li></ul></li><li>意义：中国历史上第一次农民大起义，史又称“大泽乡起义”。</li><li>影响：掀起了反秦的浪潮，沉重打击了秦朝的统治。</li></ul><h3 id="汉朝"><a href="#汉朝" class="headerlink" title="汉朝"></a>汉朝</h3><h4 id="西汉"><a href="#西汉" class="headerlink" title="西汉"></a>西汉</h4><ul><li>建立过程：<ul><li>1.项羽骁勇善战，在巨鹿之战中以少胜多，歼灭秦军主力。</li><li>2.公元前 $ \color{aqua}{207} $ 年，刘邦直抵咸阳</li><li>3.项羽自封“西楚霸王”，刘邦封“汉王”。</li><li>4.双方展开争夺帝位的战争，史称“楚汉之争”。项羽刚愎自用，刘邦收揽民心，善用人才。</li><li>5.刘邦将项羽部合围于垓下，项羽突围后自刎，刘邦大胜而归。</li></ul></li><li>建立时间：公元前 $ \color{aqua}{202} $ 年。</li><li>建立者：汉高祖刘邦</li><li>都城：咸阳</li></ul><h5 id="面临问题"><a href="#面临问题" class="headerlink" title="面临问题"></a>面临问题</h5><p>西汉初年面临的主要问题是如何恢复和发展社会生产，巩固新王朝。</p><h5 id="休养生息政策"><a href="#休养生息政策" class="headerlink" title="休养生息政策"></a>休养生息政策</h5><p>汉高祖吸取秦暴政速亡的教训，实行休养生息政策：士兵还乡，奴婢释放，鼓励农业，轻徭薄赋。</p><h5 id="文景之治"><a href="#文景之治" class="headerlink" title="文景之治"></a>文景之治</h5><ul><li>西汉初年的盛世局面，由汉文帝和汉景帝共同开创，</li><li>采取的措施：注重农业，减轻税役，以德化民，勤俭治国（汉文帝）。</li></ul><h5 id="汉武帝巩固大一统王朝"><a href="#汉武帝巩固大一统王朝" class="headerlink" title="汉武帝巩固大一统王朝"></a>汉武帝巩固大一统王朝</h5><ul><li>政治上：<ul><li>采纳主父偃的建议，实行推恩令，削弱诸侯王的势力。</li><li>建立刺史制度，限制地方豪强的势力。</li></ul></li><li>思想上（罢黜百家尊崇儒术）：<ul><li>采纳董仲舒建议，罢黜百家，尊崇儒术，把儒家学说立为正统思想。</li><li>在长安兴建太学，以儒家的《诗》《书》《礼》《易》《春秋》为教材。</li><li>使儒士进入各级政权机构。</li><li>从此，入学居于主导地位，为历代王朝所推崇，影响深远。</li></ul></li><li>经济上:<ul><li>为加强中央对社会经济的控制，将铸币权收归中央，统一铸造五铢钱。</li><li>在全国各地设盐铁官，煮盐冶铁经营权收归国有，实行盐铁专卖。</li><li>统一调配物资，平抑物价。</li></ul></li><li>军事上：<ul><li>平定七国之乱（汉景帝）</li><li>漠北战役<ul><li>背景：秦末汉初匈奴族在首领冒顿单于的带领下统一蒙古草原，不断南下袭扰，西汉建国出采取和亲政策。</li><li>时间：公元前 $ \color{aqua}{119} $ 年</li><li>人物：卫青，霍去病。</li><li>过程：卫青在漠北与匈奴主力相遇，黄昏包抄匈奴部，单于突围。霍去病挥师北进，追击匈奴。</li><li>影响：匈奴无力与西汉抗衡，部分匈奴人西迁。</li></ul></li></ul></li><li>意义：汉武帝在位时，西汉国力强盛。汉武帝从政治、思想、经济和军事等方面巩固了大一统的局面，使西汉王朝进入鼎盛时期。</li></ul><h4 id="新朝"><a href="#新朝" class="headerlink" title="新朝"></a>新朝</h4><ul><li>时代背景：西汉后期，朝政腐败</li><li>建立时间：公元 $ \color{aqua}{9} $ 年</li><li>建立者：外戚王莽</li><li>衰败：施政加剧社会动荡，被农民起义推翻。</li></ul><h4 id="东汉"><a href="#东汉" class="headerlink" title="东汉"></a>东汉</h4><ul><li>建立时间：公元 $ \color{aqua}{25} $ 年</li><li>建立者：西汉宗室，光武帝刘秀</li><li>都城：洛阳</li></ul><h5 id="光武中兴："><a href="#光武中兴：" class="headerlink" title="光武中兴："></a>光武中兴：</h5><ul><li>释放奴婢，减轻农民的负担</li><li>合并郡县，惩处贪官污吏</li><li>允许北方少数民族内迁，缓和矛盾</li><li>结果：社会比较安定，经济得以恢复发展</li></ul><h5 id="外戚宦官交替专权"><a href="#外戚宦官交替专权" class="headerlink" title="外戚宦官交替专权"></a>外戚宦官交替专权</h5><ul><li>时间：东汉中期以后</li><li>外戚：继位的皇帝年幼无法执政，由太后听政，太后重用亲族，外戚势力膨胀</li><li>宦官：皇帝长大以后不甘被外戚摆布，与宦官合谋铲除外戚势力，宦官得宠，把持朝政。</li></ul><h5 id="黄巾起义："><a href="#黄巾起义：" class="headerlink" title="黄巾起义："></a>黄巾起义：</h5><ul><li>时间：公元 $ \color{aqua}{184} $ 年</li><li>领导者：张角</li><li>口号：苍天已死，黄天当立</li><li>影响：历史 9 个月被镇压下去，沉重打击了东汉的统治，使其一蹶不振。</li></ul><h5 id="州牧割据："><a href="#州牧割据：" class="headerlink" title="州牧割据："></a>州牧割据：</h5><ul><li>概念：黄巾起义后，中央为加强对地方的统治，改刺史为州牧，统领地方军政事务，地位在郡守之上。州牧迅速膨胀反抗中央命令，成为割据军阀。</li><li>影响：加速了东汉王朝的瓦解。</li></ul><h4 id="丝绸之路"><a href="#丝绸之路" class="headerlink" title="丝绸之路"></a>丝绸之路</h4><ul><li>开辟时间：西汉</li><li>开辟者：张骞</li><li>在位皇帝：汉武帝</li><li>西域的定义：新疆和更远大的地区</li><li>意义：丝绸之路是中国东西方往来的大动脉；促进了东西方贸易和文化交流</li></ul><h5 id="第一次出使西域"><a href="#第一次出使西域" class="headerlink" title="第一次出使西域"></a>第一次出使西域</h5><ul><li>时间：公元前 $ \color{aqua}{138} $ 年。</li><li>目的：联络大月氏夹击匈奴</li><li>意义：使汉朝了解到西域的具体情况</li></ul><h5 id="第二次出使西域"><a href="#第二次出使西域" class="headerlink" title="第二次出使西域"></a>第二次出使西域</h5><ul><li>时间：公元前 $ \color{aqua}{119} $ 年</li><li>目的：加强汉朝与西域的联系</li><li>意义：促进了汉朝与西域各国之间的相互了解与往来，为丝绸之路的开辟奠定基础。</li></ul><h5 id="陆上丝绸之路"><a href="#陆上丝绸之路" class="headerlink" title="陆上丝绸之路"></a>陆上丝绸之路</h5><ul><li>长安 $ \rightarrow $ 河西走廊 $ \rightarrow $ 西域 $ \rightarrow $ 中亚 $ \rightarrow $ 西亚 $ \rightarrow $ 欧洲</li></ul><h5 id="海上丝绸之路"><a href="#海上丝绸之路" class="headerlink" title="海上丝绸之路"></a>海上丝绸之路</h5><ul><li>最远到达印度半岛南端和锡兰</li></ul><h5 id="汉朝与西域的往来"><a href="#汉朝与西域的往来" class="headerlink" title="汉朝与西域的往来"></a>汉朝与西域的往来</h5><ul><li>汉朝 $ \rightarrow $ 西域：丝绸、漆器等物品，以及开渠、凿井、铸铁等技术</li><li>汉朝 $ \leftarrow $ 西域：核桃、葡萄、石榴、苜蓿、良种马。</li></ul><h5 id="对西域的管理"><a href="#对西域的管理" class="headerlink" title="对西域的管理"></a>对西域的管理</h5><ul><li>时间：公元前 $ \color{aqua}{60} $ 年</li><li>机构：西域都护</li><li>管辖范围：西域（今新疆及巴尔喀什湖以东以南的广大地区）</li><li>地理位置：乌垒城</li><li>职责：颁行汉朝号令，调遣军队，征发粮草.</li><li>意义:标志着西域正式归属中央政权。</li></ul><h5 id="重新取得控制权"><a href="#重新取得控制权" class="headerlink" title="重新取得控制权"></a>重新取得控制权</h5><ul><li>时间：东汉明帝</li><li>人物：班超，甘英</li><li>东汉明帝派班超出使西域，重新与西域各国建立联系。班超派甘英出使大秦，开辟了前往西亚的路线。</li></ul><h4 id="两汉的科技与文化"><a href="#两汉的科技与文化" class="headerlink" title="两汉的科技与文化"></a>两汉的科技与文化</h4><h5 id="造纸术"><a href="#造纸术" class="headerlink" title="造纸术"></a>造纸术</h5><ul><li>人物：东汉宦官蔡伦</li><li>改进造纸术，此方法原料易找，价格便宜，易于推广。天下称之为“蔡侯纸”。</li></ul><h5 id="扁鹊"><a href="#扁鹊" class="headerlink" title="扁鹊"></a>扁鹊</h5><ul><li>时代：春秋战国之际</li><li>成就：总结出望闻问切</li></ul><h5 id="张仲景"><a href="#张仲景" class="headerlink" title="张仲景"></a>张仲景</h5><ul><li>时代：东汉末年</li><li>著作：《伤寒杂病论》</li><li>成果：<ul><li>提出“治未病”思想。</li><li>中医临床理论体系的开创者。</li><li>为中医药学的发展做出巨大贡献。</li><li>被后世称为“医圣”。</li></ul></li></ul><h5 id="华佗"><a href="#华佗" class="headerlink" title="华佗"></a>华佗</h5><ul><li>时代：东汉末年</li><li>成果：<ul><li>能使用麻沸散实施外科手术</li><li>创编出五禽戏</li></ul></li></ul><h5 id="《史记》"><a href="#《史记》" class="headerlink" title="《史记》"></a>《史记》</h5><ul><li>作者：司马迁</li><li>时代：东汉</li><li>记述时代：从黄帝到汉武帝时期</li><li>地位：中国历史上第一部纪传体通史</li></ul><h5 id="道教"><a href="#道教" class="headerlink" title="道教"></a>道教</h5><ul><li>产生时代：东汉末年</li><li>太平道（张角）</li><li>五斗米道（张陵）</li></ul><h5 id="佛教"><a href="#佛教" class="headerlink" title="佛教"></a>佛教</h5><ul><li>产生时间：公元前六世纪</li><li>产生地：古印度</li><li>创始人：乔达摩悉达多（释迦牟尼）</li><li>传入时间：张骞通西域后，西汉。</li><li>主张：众生平等</li><li>发展：西汉自丝绸之路传入中国，东汉明帝时得到上层统治阶级的扶持，迎合了贫苦民众渴求生活平安的愿望，因此得以传播。</li><li>影响：丰富了中国文化，在各方面产生深远影响。</li></ul><h2 id="三国两晋南北朝时期：政权分立与民族交融"><a href="#三国两晋南北朝时期：政权分立与民族交融" class="headerlink" title="三国两晋南北朝时期：政权分立与民族交融"></a>三国两晋南北朝时期：政权分立与民族交融</h2><p> $ 西晋\begin{cases}<br>    北方：十六国 \to 北魏\begin{cases}<br>    东魏\to 北齐<br>    \<br>    西魏\to 北周<br>    \end{cases}<br>    \to 北齐（北齐灭北周）<br>    \<br>    南方：东晋 \rightarrow南朝：宋齐梁陈<br>    \<br>\end{cases} $ </p><h3 id="三国时期"><a href="#三国时期" class="headerlink" title="三国时期"></a>三国时期</h3><h4 id="曹操发展实力的措施"><a href="#曹操发展实力的措施" class="headerlink" title="曹操发展实力的措施"></a>曹操发展实力的措施</h4><ul><li>政治上：控制汉献帝，挟天子以令诸侯</li><li>军事上：实行屯田制。</li></ul><h4 id="官渡之战"><a href="#官渡之战" class="headerlink" title="官渡之战"></a>官渡之战</h4><ul><li>时间：公元 $ \color{aqua}{200} $ 年</li><li>交战双方：曹军和袁军</li><li>战术：声东击西，各个击破</li><li>结果：曹操胜利</li><li>特点：以少胜多</li><li>影响：为曹操统一北方奠定基础</li></ul><h4 id="赤壁之战"><a href="#赤壁之战" class="headerlink" title="赤壁之战"></a>赤壁之战</h4><ul><li>时间：公元 $ \color{aqua}{208} $ 年</li><li>交战双方：曹军和孙刘联军</li><li>战术：利用地理优势，才用火攻</li><li>结果：孙刘联军大胜</li><li>特点：以少胜多</li><li>影响：为三国鼎立的局面的形成奠定基础</li></ul><h4 id="魏"><a href="#魏" class="headerlink" title="魏"></a>魏</h4><ul><li>建立时间：公元 $ \color{aqua}{220} $ 年</li><li>建立者：曹丕</li><li>都城：洛阳</li><li>国号：魏</li><li>治国方略：重视农业生产，兴修水利。</li><li>衰落：公元 $ \color{aqua}{266} $ 年被司马懿之孙司马炎篡权</li></ul><h4 id="蜀"><a href="#蜀" class="headerlink" title="蜀"></a>蜀</h4><ul><li>建立时间：公元 $ \color{aqua}{221} $ 年</li><li>建立者：刘备</li><li>都城：成都</li><li>国号：汉</li><li>治国方略：丞相诸葛亮加速西南地区开发， 改善民族关系。</li><li>衰落：公元 $ \color{aqua}{263} $ 被魏所灭。</li></ul><h4 id="吴"><a href="#吴" class="headerlink" title="吴"></a>吴</h4><ul><li>建立时间：公元 $ \color{aqua}{222} $ 年孙权称王，公元 $ \color{aqua}{229} $ 年孙权称帝</li><li>建立者：孙权</li><li>都城：建业</li><li>国号：吴</li><li>治国方略：公元 $ \color{aqua}{230} $ 年，卫温率队至夷洲，加强大陆与台湾间的联系。</li><li>衰落：公元 $ \color{aqua}{280} $ 被西晋所灭。</li></ul><h3 id="西晋"><a href="#西晋" class="headerlink" title="西晋"></a>西晋</h3><ul><li>建立过程：司马懿夺取魏国军政大权，司马炎自立为帝。</li><li>建立时间：公元 $ \color{aqua}{266} $ 年。</li><li>建立者：晋武帝司马炎</li><li>国都：洛阳</li></ul><h4 id="优待大地主"><a href="#优待大地主" class="headerlink" title="优待大地主"></a>优待大地主</h4><ul><li>西晋皇室与大臣多是地主贵族资产阶级出身，西晋王朝制定一系列优待他们的政策</li><li>在生活上以豪华奢侈为荣，追求享乐。</li></ul><h4 id="八王之乱"><a href="#八王之乱" class="headerlink" title="八王之乱"></a>八王之乱</h4><ul><li>起因：晋武帝大封同姓诸王，宗室诸王掌管军政大权，实力日益强大。</li><li>过程：晋惠帝时，八王为争夺中央政权先后起兵混战。史称“八王之乱”。主要在洛阳一带展开，米价飞涨。</li><li>影响：西晋从此衰落，幸存者逃亡南方，形成我国历史上第一次大规模人口迁徙高潮。</li></ul><h4 id="北朝"><a href="#北朝" class="headerlink" title="北朝"></a>北朝</h4><ul><li>时代背景：东汉、魏、晋时期，我国北方游牧民族不断内迁。</li><li>主要内迁民族：匈奴、鲜卑、羯、氐、羌，史称“五胡乱华”。</li><li>时间：4 世纪到 5 世纪前期</li><li>主要政权：前凉，后凉，南凉，北凉，西凉，前秦，后秦，西秦，前赵，后赵，前燕，后燕，南燕，北燕，夏，成汉。共计 16 个政权。</li><li>前秦：<ul><li>建立者：苻坚</li><li>建立民族：氐</li><li>任用丞相：汉人王猛</li><li>改革措施：整顿吏治，厉行法治，加强集权，招抚流民，减赋禁奢，大力兴办学校，提倡儒学。</li><li>影响：前秦境内胡汉之间对立矛盾有所缓和。</li></ul></li><li>十六国后期，鲜卑拓跋氏北魏逐渐统一北方。</li><li>分封诸王对中央政权的统治造成权利架空的现象。</li><li>统治者认为自己与当地主流认可族群同族同宗的目的：证明统治地位合法性，便于加强对该地区的统治。</li></ul><h3 id="东晋南朝时期江南地区的开发"><a href="#东晋南朝时期江南地区的开发" class="headerlink" title="东晋南朝时期江南地区的开发"></a>东晋南朝时期江南地区的开发</h3><h4 id="东晋的兴亡"><a href="#东晋的兴亡" class="headerlink" title="东晋的兴亡"></a>东晋的兴亡</h4><ul><li>建立时间：公元 $ \color{aqua}{317} $ 年。</li><li>建立者：司马睿</li><li>都城：建康</li><li>司马睿政治上依靠王导，军事上依靠王敦，时称： $ \star $  <strong>王与马，共天下</strong></li><li><strong>淝水之战</strong>后，东晋的经济得到了发展，江南出现的现象是 <code>荆扬宴安，户口殷实</code>。</li><li>衰落：公元 $ \color{aqua}{420} $ 年，武将篡权。</li></ul><h4 id="南朝"><a href="#南朝" class="headerlink" title="南朝"></a>南朝</h4><ul><li><p>$ \texttt{420}\to\texttt{589} $ ；</p></li><li><p>都城：建康</p></li><li>有  $ \star $  <code>宋</code> <code>齐</code> <code>梁</code> <code>陈</code> 四个王朝，<code>宋</code> 疆域是最大的；</li><li><code>宋</code>： $ \texttt{宋武帝\&amp;宋文帝轻徭薄赋}\to\texttt{江南民殷国富、社会安定} $ ；</li><li><code>梁</code>： $ \texttt{梁武帝萧衍时发生叛乱}\to\texttt{江东最富庶的地区最终千里绝烟，人迹罕见} $ 。</li></ul><h4 id="江南地区的开发"><a href="#江南地区的开发" class="headerlink" title="江南地区的开发"></a>江南地区的开发</h4><ul><li><p>时期：从 $ \texttt{西晋末年} $ 开始，从 $ \texttt{东晋后期} $ 增多</p></li><li><p>$ \star $  江南地区经济发展的原因：</p><ul><li>$ \star $  北方人的<strong>南迁</strong>，带来了<strong>劳动力</strong>和<strong>先进的生产工具和生产技术</strong>；</li><li>江南地区战乱较少，社会安定；</li><li>江南地区自然条件优越；</li><li>南北方人民共同努力。</li></ul></li><li>江南地区发展的现象：<ul><li>农业上：<ul><li>开垦荒地，耕地面积增加，兴修水利；</li><li>先进生产技术：<strong>犁耕</strong>、<strong>施肥</strong>，<strong>广种水稻小麦</strong>；</li><li>水稻由直栽变成<strong>育秧移栽</strong>，实行<strong>麦稻兼作</strong>， $ \star $   $ \texttt{五岭以南种植了双季稻} $ ；</li><li>种桑养蚕、培植果木、种植药材，实行农业多种经营。</li></ul></li><li>手工业上：<ul><li>缫丝、织布 、制瓷、冶铸、造船、造纸、制盐等工艺都有显著、快速的发展。</li></ul></li><li>商业上：<ul><li>$ \star $  南朝时的<strong>建康</strong>成为<strong>商业中最为活跃的大都市</strong>。</li></ul></li></ul></li></ul><h3 id="北魏政治和北方民族大融合"><a href="#北魏政治和北方民族大融合" class="headerlink" title="北魏政治和北方民族大融合"></a>北魏政治和北方民族大融合</h3><h4 id="淝水之战"><a href="#淝水之战" class="headerlink" title="淝水之战"></a>淝水之战</h4><blockquote><p>风声鹤唳、草木皆兵、抽鞭断流、东山再起。</p></blockquote><ul><li>交战背景：<ul><li>北方：<strong>前秦</strong>统一了<strong>黄河流域</strong>一带；</li><li>南方：<strong>司马睿</strong>重建晋朝，都城在<strong>建康</strong>，史称 <code>东晋</code>。</li></ul></li><li>时间：公元 $ \color{aqua}{383} $ 年</li><li>交战双方： $ \star $  前秦&amp;东晋；</li><li>交战结果：东晋大胜</li><li><p>特点：以少胜多</p></li><li><p>原因：</p><ul><li>前秦：<strong>苻坚</strong>骄傲轻敌，军心不齐，指挥不当，战线太长。</li><li>东晋：不畏强敌，团结一致，指挥得当，奋勇抗战。</li></ul></li><li>影响：<ul><li>前秦：<strong>土崩瓦解</strong>，<strong>分裂混战</strong>；</li><li>东晋：暂时稳定，经济发展，例如江南 <code>荆扬宴安，户口殷实</code>。</li></ul></li></ul><h4 id="北魏孝文帝改革"><a href="#北魏孝文帝改革" class="headerlink" title="北魏孝文帝改革"></a>北魏孝文帝改革</h4><ul><li>建立时间： $ \texttt4 $  世纪后期，<strong>鲜卑</strong>族<strong>拓跋</strong>部建立</li><li>统一北方：公元 $ \color{aqua}{439} $ 年，结束了十六国以来<strong>分裂割据</strong>的局面；</li><li>改革目的：学习和接受<strong>汉族先进文化</strong>，加强<strong>对中原的统治</strong>；</li><li>改革措施：<ul><li>公元 $ \color{aqua}{494} $ 年 迁都洛阳；</li><li>汉化措施：<ul><li>说汉语（<strong>官员</strong>在<strong>朝廷</strong>中必须使用汉语）；</li><li>穿汉服；</li><li>通汉婚；</li><li>改汉姓。</li></ul></li></ul></li><li><p>改革作用：促进了<strong>民族交融</strong>，也<strong>增强了北魏的实力</strong>；</p></li><li><p>改革成功的必要因素：</p><ul><li>顺应时代潮流；</li><li>群众都<strong>支持</strong>；</li><li>恰当的<strong>政策和措施</strong>；</li><li>统治者个人<strong>才能</strong>。</li></ul></li></ul><h4 id="北方地区的民族交融"><a href="#北方地区的民族交融" class="headerlink" title="北方地区的民族交融"></a>北方地区的民族交融</h4><blockquote><p>北朝后期，我国北方出现了各民族的大交融。</p></blockquote><p>民族交融表现：</p><ul><li><p>经济习俗：少数民族学习汉族的<strong>农业技艺</strong>；汉族人民学习少数民族的<strong>畜牧经验</strong>，开始学习和接受少数民族的食物、服装、用具等等；</p></li><li><p>政治制度：北朝统治者实行君主专制制度；</p></li><li>文化交流：西晋时，内迁民族大多<strong>已使用汉语</strong>；孝文帝改革后，<strong>汉语</strong>成为北方主要的<strong>通用语言</strong>。</li><li><p>民族心理：随着经济、文化的交流、融汇，思想感情日益沟通，<code>胡</code> <code>汉</code> 的观念渐淡薄，各民族之间的隔阂与偏见逐渐减少。</p><p>$ \star $  影响：为中华民族的<strong>发展</strong>注入了<strong>新的动力</strong>，进一步<strong>丰富了</strong>中华民族的<strong>物质文明和精神文化</strong>，并为隋唐时期多民族国家的繁荣与发展奠定了基础。</p></li></ul><h3 id="魏晋南北朝的科技和文化"><a href="#魏晋南北朝的科技和文化" class="headerlink" title="魏晋南北朝的科技和文化"></a>魏晋南北朝的科技和文化</h3><h4 id="农"><a href="#农" class="headerlink" title="农"></a>农</h4><p> $ \texttt{《齐民要术》} $ </p><ul><li><p>作者： <strong>北朝</strong>贾思勰 <code>xié</code>；</p></li><li><p>地位：  $ \star $  <strong>我国现存最早的一部完整的农书</strong>；</p></li><li>影响： 这部农书突显了中国古代科学家以<strong>民生</strong>为本的<strong>务实精神</strong>，对后世的发展有深远的影响。</li></ul><h4 id="科"><a href="#科" class="headerlink" title="科"></a>科</h4><p> $ \texttt{祖冲之} $ </p><ul><li><p>时代： <strong>南北朝</strong>；</p></li><li><p>成就：</p><ul><li>$ \star $  数学：三国时期的刘徽最早提出了具有极限思维的圆周率的正确计算方法，祖冲之便运用刘徽的方法，把圆周率精确到小数点以后的<strong>第七位数字</strong>，比欧洲领先<strong>近千年</strong>；</li><li>天文历法：测算一年的时间，制定了当时<strong>最</strong>先进的立法《大明历》；</li><li>机械制造：指南车、水推磨、千里船。</li></ul></li></ul><h4 id="书"><a href="#书" class="headerlink" title="书"></a>书</h4><ul><li><p>三国 <code>曹魏</code> 时期：钟繇 <strong>（<em>独</em>创楷书书法）</strong>、胡昭；</p></li><li><p>西晋时期：设置 <code>书博士</code>，教授书法，以钟繇、胡昭二人书法作为<strong>标准字体</strong>；</p></li><li>$ \star $  东晋时期：王羲之<strong>将书法提高到一个新高度</strong>：<ul><li>代表作品《兰亭集序》<code>天下第一行书</code>；</li><li>特点是 <code>飘若浮云，矫若惊龙</code>；</li><li>$ \star $  被誉为<strong>书圣</strong>；</li></ul></li></ul><h4 id="画"><a href="#画" class="headerlink" title="画"></a>画</h4><p> $ \texttt{顾恺之} $ </p><ul><li><p>时代：  $ \star $  东晋；</p></li><li><p>地位：当时最著名的画家；</p></li><li>特点：他擅长的人物画，线条<strong>优美活泼，人物传神，富有个性</strong>。</li><li>$ \star $  代表作：《女史箴图》与《洛神赋图》；</li><li>山水画开始形成。</li></ul><h4 id="雕"><a href="#雕" class="headerlink" title="雕"></a>雕</h4><ul><li>南北朝时期的佛教盛行，有山西大同的<strong>云冈石窟</strong>，河南洛阳的<strong>龙门石窟</strong>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化课 </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ IDE 与 编辑器 的选择</title>
      <link href="/articles/cpp-editor-choice.html/"/>
      <url>/articles/cpp-editor-choice.html/</url>
      
        <content type="html"><![CDATA[<div class="tip info"><p>下文的 <strong>编辑器</strong> 多指 <strong>代（源）码编辑器</strong>。 </p></div><h2 id="IDE-还是-编辑器？"><a href="#IDE-还是-编辑器？" class="headerlink" title="IDE 还是 编辑器？"></a>IDE 还是 编辑器？</h2><p>对不少人来说，选择 IDE 还是 编辑器 仍然是一大难题。</p><h2 id="IDE-是什么？"><a href="#IDE-是什么？" class="headerlink" title="IDE 是什么？"></a>IDE 是什么？</h2><p>IDE 是一个集成一些工具为一体的工具。</p><p>IDE 能用于编辑、编译、调试和运行等。</p><p>通常而言，IDE 是专为一种语言设计的。</p><p>大多数而言，IDE 是收费的。</p><h3 id="好处是？"><a href="#好处是？" class="headerlink" title="好处是？"></a>好处是？</h3><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>调试方便。IDE 提供了各式的调试和分析工具，能帮助开发者快速定位问题。</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>标准统一。如果若干开发者使用同一套 IDE 进行同一个项目的工作，IDE 提供的预设和标准可以规范开发者们留下的内容。</p>            </div><h3 id="坏处是？"><a href="#坏处是？" class="headerlink" title="坏处是？"></a>坏处是？</h3><div class='checkbox times checked'><input type="checkbox" checked="checked"/>            <p>资源要求。许多的 IDE 对计算机性能和资源都有不低的要求。</p>            </div><div class='checkbox times checked'><input type="checkbox" checked="checked"/>            <p>难于上手。熟悉一个 IDE 需要一些时间，对于初学者可能不太友好。</p>            </div><h2 id="编辑器-是什么？"><a href="#编辑器-是什么？" class="headerlink" title="编辑器 是什么？"></a>编辑器 是什么？</h2><p>顾名思义，代码编辑器 是用来编辑源代码的工具。</p><p>编辑器 通常不能或者很少对调试和运行提供帮助。</p><p>通常而言，编辑器 能编辑多种语言。</p><p>通常而言，编辑器 是轻量的。</p><h3 id="好处是？-1"><a href="#好处是？-1" class="headerlink" title="好处是？"></a>好处是？</h3><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>轻量便捷。相较于 IDE 而言，编辑器轻量便捷，不会占用太多资源，易于安装、配置和学习。</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>编辑灵活。编辑器 通常能编辑（运行）多种语言。</p>            </div><h3 id="坏处是？-1"><a href="#坏处是？-1" class="headerlink" title="坏处是？"></a>坏处是？</h3><div class='checkbox times checked'><input type="checkbox" checked="checked"/>            <p>难于调试。一般的 编辑器 不易于调试和寻找问题。通常需要借助另外的工具。</p>            </div><h2 id="我该如何选择一款-IDE？"><a href="#我该如何选择一款-IDE？" class="headerlink" title="我该如何选择一款 IDE？"></a>我该如何选择一款 IDE？</h2><p>下面是几种常见的编写 <code>C++</code> 所用到的 IDE：</p><div class="tabs" id="ides"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ides-1">Eclipse</button></li><li class="tab"><button type="button" data-href="#ides-2">Dev-C++</button></li><li class="tab"><button type="button" data-href="#ides-3">XCode</button></li><li class="tab"><button type="button" data-href="#ides-4">GUIDE</button></li><li class="tab"><button type="button" data-href="#ides-5">Geany</button></li><li class="tab"><button type="button" data-href="#ides-6">CLion</button></li><li class="tab"><button type="button" data-href="#ides-7">CP Editor</button></li><li class="tab"><button type="button" data-href="#ides-8">Visual Studio</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ides-1"><p>引用自维基百科：</p><div class="note default simple"><p>Eclipse 是著名的跨平台开源集成开发环境（IDE）。最初主要用来 Java 语言开发，当前亦有人通过插件使其作为 C++、Python、PHP 等其他语言的开发工具。</p><p>Eclipse 的本身只是一个框架平台，但是众多插件的支持，使得 Eclipse 拥有较佳的灵活性，所以许多软件开发商以 Eclipse 为框架开发自己的 IDE。</p><p>Eclipse 最初是由 IBM 公司开发的替代商业软件 Visual Age for Java 的下一代 IDE 开发环境，2001 年 11 月贡献给开源社区，现在它由非营利软件供应商联盟 Eclipse 基金会（Eclipse Foundation）管理。</p></div><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/eclipse/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-2"><p><code>Dev-C++</code> 真的是不少 <code>OIers</code> 们入门的开发环境了。</p><p><code>Dev-C++</code> 的好处是易于安装和配置，还支持单文件编译。</p><p><code>Dev-C++</code> 有如下几个分支：</p><ol><li><code>Bloodshed Dev-C++</code> 这个分支的 <code>Dev-C++</code> 由 2005 年停止更新。</li><li><code>Orwell Dev-C++</code> 相较于上一个分支，这个分支更新了编译器版本，以及修正了不少错误。由 2015 年停止更新。</li><li><code>Embarcadero Dev-C++</code> 相较于上两个分支，这个分支更新了编译器版本，支持了暗色模式与高 DPI，支持了较高的的 C++ 标准。</li><li><code>小熊猫 C++</code> 相较于上三个分支，这个分支是由中国开发者开发的。<a href="https://royqh1979.gitee.io/redpandacpp">这个分支</a> 支持了语法提示和更高版本的 <code>MinGW</code>。</li></ol><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/devcpp/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-3"><p><del>点进来的都是用 <code>macOS</code> 的小伙伴吧？</del></p><p><code>XCode</code> 在 <code>macOS</code> 上非常易于开发和使用<del>，想要在 <code>macOS</code> 装 <code>C++</code> 编译器，找 <code>XCode</code> 无疑是最简单的方法</del>。</p><p><code>XCode</code> 美观又简洁，还是由 <code>Apple</code> 开发的。但是对于 <code>OI</code> 来说，<code>XCode</code> 主要是用来开发 <code>Apple</code> 系列产品的软件，体积过大，而且只能在 <code>macOS</code> 上使用。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/xcode/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-4"><p><del>这么鸡肋的 IDE 真有人用啊？</del></p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/guide/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-5"><p>跟 <code>Dev-C++</code> 的特性差不多。</p><p>但是，跨平台。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/geany/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-6"><p><code>Jetbrains</code> 家的 <code>IDE</code>。用起来嘛，有的人说好，也有的人说坏。</p><p><del>用于强大语言的强大工具。</del></p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/clion/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-7"><p>对于 <code>OIers</code> 来说，这真的是一个不错的 <code>IDE</code>。</p><p>这个 <code>IDE</code> 是专门为 <code>OI</code> 开发的。它可以自动化编译和运行，甚至支持像 <code>cph</code> 那样拉取 <code>Online Judge</code> 上的样例，还能直接从 <code>Codeforces</code> 上提交代码与返回结果。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/cpeditor/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ides-8"><p>微软家的 <code>IDE</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="我该如何选择一款-编辑器？"><a href="#我该如何选择一款-编辑器？" class="headerlink" title="我该如何选择一款 编辑器？"></a>我该如何选择一款 编辑器？</h2><p>下面是几种常见的编写 <code>C++</code> 所用到的 代码编辑器：</p><div class="tabs" id="editors"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#editors-1">Vim</button></li><li class="tab"><button type="button" data-href="#editors-2">GNU Emacs</button></li><li class="tab"><button type="button" data-href="#editors-3">Visual Studio Code</button></li><li class="tab"><button type="button" data-href="#editors-4">Notepad++</button></li><li class="tab"><button type="button" data-href="#editors-5">Sublime Text</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="editors-1"><p><code>Vim</code> 码字飞飞快。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/vim/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="editors-2"><p><code>Emacs</code> 也是一款不错的 编辑器。易于上手，配置简单。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/emacs/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="editors-3"><p><del>编辑器区大哥多。</del></p><p>地表最强编辑器。</p><p><code>Visual Studio Code</code> 同样是微软家的。跨平台，而且，好用。</p><p>和 <code>Jetbrains</code> 家 <code>IDE</code> 一样，插件撑起一半生态。</p><p>不过不推荐新手使用 <code>Visual Studio Code</code>。这玩意的配置很难，而且估计你一看到英文界面和<strong>没进行个性化前</strong>巨丑无比的 <code>UI</code> 就被劝退了。</p><p>另外，如果你是一个 <code>OI</code> 初学者，建议使用 <code>Code Runner</code> 而非 <code>C/C++</code> 来调试和运行 <code>C++</code> 单文件程序。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/vscode/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="editors-4"><p>可爱的软件和可爱的作者，但是。。。嗯。。。</p><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/npp/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="editors-5"><p><code>Sublime Text</code> 同样也是一款优秀的编辑器。</p><div class="note default simple"><p>Sublime Text 是一款轻量级的文本编辑器，支持多种语言的语法高亮及代码补全。具有高度的可拓展性以及 Vim 模式，特别的热启动模式大幅减小了文件丢失的可能。</p></div><p><code>OI Wiki</code> 上对此的介绍：<a href="https://oi-wiki.org/tools/editor/sublime/">link</a>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="附一：各-IDE-与-编辑器-对简体中文的支持"><a href="#附一：各-IDE-与-编辑器-对简体中文的支持" class="headerlink" title="附一：各 IDE 与 编辑器 对简体中文的支持"></a>附一：各 IDE 与 编辑器 对简体中文的支持</h2><div class="table-container"><table><thead><tr><th>名称</th><th>支持</th></tr></thead><tbody><tr><td>Eclipse</td><td>需要安装语言包（官方）</td></tr><tr><td>Dev-C++</td><td>原生支持</td></tr><tr><td>XCode</td><td>原生支持</td></tr><tr><td>GUIDE</td><td>原生支持</td></tr><tr><td>Geany</td><td>原生支持</td></tr><tr><td>CLion</td><td>需要安装插件（官方）</td></tr><tr><td>CP Editor</td><td>原生支持</td></tr><tr><td>Visual Studio</td><td>需要安装语言包（官方）</td></tr><tr><td>Vim</td><td>原生支持</td></tr><tr><td>Emacs</td><td>原生支持</td></tr><tr><td>Visual Studio Code</td><td>需要安装插件（官方）</td></tr><tr><td>Notepad++</td><td>原生支持</td></tr><tr><td>Sublime Text</td><td>需要安装插件</td></tr></tbody></table></div><h2 id="附二：NOI-Linux-2-0-中内置的-IDE-与-编辑器"><a href="#附二：NOI-Linux-2-0-中内置的-IDE-与-编辑器" class="headerlink" title="附二：NOI Linux 2.0 中内置的 IDE 与 编辑器"></a>附二：NOI Linux 2.0 中内置的 IDE 与 编辑器</h2><ol><li>Code::Blocks</li><li>Geany</li><li>Visual Studio Code</li><li>Emacs</li><li>Gedit</li><li>Vim</li><li>Joe</li><li>Nano</li><li>Sublime Text</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OI </tag>
            
            <tag> IDE </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/articles/hello-world.html/"/>
      <url>/articles/hello-world.html/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Say Hello to the Whole World!</p></blockquote><p>Hellolin 于 <code>2022/12/20</code> 留下了这个页面。</p>]]></content>
      
      
      <categories>
          
          <category> 其他内容 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 流 (stream) 的概念与应用</title>
      <link href="/articles/cpp-stream.html/"/>
      <url>/articles/cpp-stream.html/</url>
      
        <content type="html"><![CDATA[<h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><p>之前的代码学习中，已经接触了 <code>iostream</code> 库中的 <code>cin</code> 和 <code>cout</code> 函数。</p><p>相对于 <code>cstdio</code> 中的 <code>scanf</code> 和 <code>printf</code> 而言，<code>cin</code> 和 <code>cout</code> 的好处是不用知道类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a=<span class="hljs-number">20</span>;<br>cout&lt;&lt;a;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a); <span class="hljs-comment">// a 类型填错，此时虽然 printf 不会报错，但是实际出现 bug</span><br></code></pre></td></tr></table></figure><p>C++ 把数据之间的输入输出操作称之为流，即 <code>stream</code>。<code>I/O</code> 上的流操作当然叫做 <code>iostream</code>。同样的，C++ 流还支持文件和字符串。它们分别是 <code>fstream</code> 和 <code>stringstream</code>。</p><h2 id="STL-中的流类"><a href="#STL-中的流类" class="headerlink" title="STL 中的流类"></a>STL 中的流类</h2><p>对于字符串的流，STL 提供了 <code>char*</code> 与 <code>string</code> 的两个类。分别定义于头文件 <code>strstream</code> 和 <code>stringstream</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">名称</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">基类</td><td style="text-align:left"><code>ios</code></td><td style="text-align:left">所有的流类都是它的派生类，它的作用是保存流状态</td></tr><tr><td style="text-align:left">输入输出类</td><td style="text-align:left"><code>iostream</code></td><td style="text-align:left">输入输出流类的基类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>fstream</code></td><td style="text-align:left">文件输入输出流类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>stringstream</code></td><td style="text-align:left">字符串输入输出流类，类型要求 <code>std::__cxx11::string</code></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>strstream</code></td><td style="text-align:left">字符串输入输出流类，类型要求 <code>char*</code></td></tr><tr><td style="text-align:left">输入类</td><td style="text-align:left"><code>istream</code></td><td style="text-align:left">输入流类的基类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>istream_withassign</code></td><td style="text-align:left"><code>&gt;&gt;</code> 操作</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>ifstream</code></td><td style="text-align:left">文件输入流类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>istringstream</code></td><td style="text-align:left">字符串输入类，类型要求 <code>std::__cxx11::string</code></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>istrstream</code></td><td style="text-align:left">字符串输入类，类型要求 <code>char*</code></td></tr><tr><td style="text-align:left">输出类</td><td style="text-align:left"><code>ostream</code></td><td style="text-align:left">输出流类的基类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>ostream_withassign</code></td><td style="text-align:left"><code>&lt;&lt;</code> 操作</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>ofstream</code></td><td style="text-align:left">文件输出流类</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>ostringstream</code></td><td style="text-align:left">字符串输出类，类型要求 <code>std::__cxx11::string</code></td></tr><tr><td style="text-align:left"></td><td style="text-align:left"><code>ostrstream</code></td><td style="text-align:left">字符串输出类，类型要求 <code>char*</code></td></tr></tbody></table></div><h2 id="getline-函数"><a href="#getline-函数" class="headerlink" title="getline() 函数"></a>getline() 函数</h2><p><code>getline()</code> 是个有意思的函数。它用于读入字符串。但与 <code>cin</code> 不同的是，<code>getline()</code> 不忽略开头的空白字符，且丢弃换行符。</p><h2 id="file-stream-文件操作"><a href="#file-stream-文件操作" class="headerlink" title="file stream 文件操作"></a>file stream 文件操作</h2><p>进行 <code>fstream</code> 文件操作，必须引入头文件 <code>iostream</code> 和 <code>fstream</code>。</p><h3 id="声明流"><a href="#声明流" class="headerlink" title="声明流"></a>声明流</h3><p><code>ifstream</code> 表示文件输入流。作用是读取文件当中的内容。</p><p><code>ofstream</code> 表示文件输出流。作用是创建或写入文件。</p><p><code>fstream</code> 表示文件流。既可以读取，也可以创建和写入。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::ifstream fin;<br>std::ofstream fout;<br>std::fstream fio;<br></code></pre></td></tr></table></figure><h3 id="open-函数"><a href="#open-函数" class="headerlink" title="open() 函数"></a>open() 函数</h3><p><code>open()</code> 函数用来打开文件。<code>open()</code> 是一个成员函数。</p><p>它的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* __s, ios_base::openmode __mode)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; __s, ios_base::openmode __mode)</span></span><br></code></pre></td></tr></table></figure><p>可以看到，第一个参数接受 <code>char*</code> 或 <code>string</code> 类型。它的意思是指向文件名。</p><p>第二个参数是可选的，表示打开文件的方式。</p><div class="table-container"><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>ios::in</code></td><td style="text-align:left">只读</td></tr><tr><td style="text-align:left"><code>ios::out</code></td><td style="text-align:left">只写</td></tr><tr><td style="text-align:left"><code>ios::trunc</code></td><td style="text-align:left">若文件存在，先清空文件，再打开文件</td></tr><tr><td style="text-align:left"><code>ios::ate</code></td><td style="text-align:left">打开文件，定位到文件末尾</td></tr><tr><td style="text-align:left"><code>ios::app</code></td><td style="text-align:left">写入的内容都追加到文件末尾</td></tr></tbody></table></div><p>第二个参数可以接受多种参数。</p><p>如果我想同时读写文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>fstream fio;<br>fio.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, ios::in | ios::out);<br></code></pre></td></tr></table></figure><p>如果我只想确保文件是空的，之后写文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>ofstream fout;<br>fout.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, ios::trunc | ios::out);<br></code></pre></td></tr></table></figure><h3 id="close-函数"><a href="#close-函数" class="headerlink" title="close() 函数"></a>close() 函数</h3><p>类似于 C 库中的文件操作最后要 <code>fclose()</code>，C++ 文件流操作也需要关闭文件。</p><p>它的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>就像 <code>cin</code> 与 <code>cout</code> 一样，文件的输入输出也用 <code>&gt;&gt;</code> 与 <code>&lt;&lt;</code> 的流运算符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*</span><br><span class="hljs-comment">假设 file.txt 中含有以下内容：</span><br><span class="hljs-comment">1 | 114514</span><br><span class="hljs-comment">2 | 1919810</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>string a, b;<br>fstream fio;<br>fio.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file.txt&quot;</span>, ios::in | ios::out | ios::app);<br>fio&gt;&gt;a; <span class="hljs-comment">// 此时 a 是 &quot;114514&quot;</span><br>fio&gt;&gt;b; <span class="hljs-comment">// 此时 b 是 &quot;1919810&quot;</span><br>fio&lt;&lt;<span class="hljs-string">&quot;homo&quot;</span>;<br>fio.<span class="hljs-built_in">close</span>();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">此时 file.txt 含有以下内容：</span><br><span class="hljs-comment">1 | 114514</span><br><span class="hljs-comment">2 | 1919810</span><br><span class="hljs-comment">3 | homo</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="string-stream-字符串流操作"><a href="#string-stream-字符串流操作" class="headerlink" title="string stream 字符串流操作"></a>string stream 字符串流操作</h2><p>像开头提到的一样，<code>sscanf</code> 和 <code>sprintf</code> 也能进行字符串操作，但是忘记类型就完蛋。</p><p><code>stringstream</code> 和 <code>strstream</code> 的好处就显露出来了，方便，而且安全。</p><p><code>strstream</code> 对 <code>char*</code> 操作，<code>stringstream</code> 对 <code>std::__cxx11::string</code> 操作。这两个分别定义在 <code>strstream</code> 和 <code>sstream</code> 头文件内。</p><p>为了方便，下文统称这两个流为 <code>stringstream</code>。</p><h3 id="clear-函数"><a href="#clear-函数" class="headerlink" title="clear() 函数"></a>clear() 函数</h3><p>要注意的是，<code>stringstream</code> 声明会耗费不少的时间。所以尽量只使用一个 <code>stringstream</code>。</p><p><code>clear()</code> 函数可以清空 <code>stringstream</code> 中的所有内容。</p><h3 id="输入输出-1"><a href="#输入输出-1" class="headerlink" title="输入输出"></a>输入输出</h3><p>同样的，字符串流输入输出也用 <code>&gt;&gt;</code> 与 <code>&lt;&lt;</code> 的流运算符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stringstream a;<br>std::string tmp=<span class="hljs-string">&quot;114514&quot;</span>;<br><span class="hljs-type">int</span> ans;<br>a&lt;&lt;tmp;<br>a&gt;&gt;ans; <span class="hljs-comment">// 此时 ans 是 114514</span><br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>用字符串流可以方便地进行类型转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 假设我要处理一些个人信息：包括名字，年龄和证件号</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">person</span><br>&#123;<br>    string name;<br>    <span class="hljs-type">unsigned</span> age;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> id;<br>&#125;;<br><br><span class="hljs-function">person <span class="hljs-title">convert2Person</span><span class="hljs-params">(string info)</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream ss;<br>    string name;<br>    <span class="hljs-type">unsigned</span> age;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> id;<br>    <br>    ss&lt;&lt;info;<br>    ss&gt;&gt;name&gt;&gt;age&gt;&gt;id;<br>    <br>    <span class="hljs-keyword">return</span> &#123;name, age, id&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 假设我要将一个不知道类型的变量转换为 string</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 可以用 template 简化</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function">string <span class="hljs-title">convert2String</span><span class="hljs-params">(<span class="hljs-type">const</span> T&amp; k)</span></span><br><span class="hljs-function"></span>&#123;<br>    stringstream ss;<br>    string res;<br>    <br>    ss&lt;&lt;k;<br>    ss&gt;&gt;res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="流的控制"><a href="#流的控制" class="headerlink" title="流的控制"></a>流的控制</h2><p>有一些 <code>I/O</code> 流控制函数被定义进了 <code>iomanip</code> 头里面。</p><p>比如说 <code>setw()</code>，<code>setbase()</code>，<code>setfill()</code>，<code>setiosflags()</code>，<code>setprecision()</code> 等函数。</p><h3 id="setw-函数"><a href="#setw-函数" class="headerlink" title="setw() 函数"></a>setw() 函数</h3><p>设置域宽。保证输出长度为给定的整数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;<span class="hljs-number">10</span>&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;<span class="hljs-number">300</span>&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;<span class="hljs-number">1145</span>&lt;&lt;endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果：</span><br><span class="hljs-comment">   10  300 1145</span><br><span class="hljs-comment">*/</span><br>cout&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>)&lt;&lt;<span class="hljs-number">2</span>&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>)&lt;&lt;<span class="hljs-number">1145</span>&lt;&lt;endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出结果：</span><br><span class="hljs-comment">  21145</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="setbase-函数"><a href="#setbase-函数" class="headerlink" title="setbase() 函数"></a>setbase() 函数</h3><p>进制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout&lt;&lt;<span class="hljs-built_in">setbase</span>(<span class="hljs-number">2</span>)&lt;&lt;<span class="hljs-number">32</span>&lt;&lt;endl;<br><span class="hljs-comment">// 输出：100000</span><br>cout&lt;&lt;<span class="hljs-built_in">setbase</span>(<span class="hljs-number">16</span>)&lt;&lt;<span class="hljs-number">1612</span>&lt;&lt;endl;<br><span class="hljs-comment">// 输出：64c</span><br></code></pre></td></tr></table></figure><h3 id="setfill-函数"><a href="#setfill-函数" class="headerlink" title="setfill() 函数"></a>setfill() 函数</h3><p>设置填充字符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout&lt;&lt;<span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;=&#x27;</span>)&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">3</span>)&lt;&lt;<span class="hljs-number">2</span>&lt;&lt;endl;<br><span class="hljs-comment">// 输出：==2</span><br></code></pre></td></tr></table></figure><h3 id="setiosflags-函数"><a href="#setiosflags-函数" class="headerlink" title="setiosflags() 函数"></a>setiosflags() 函数</h3><p>格式化输入输出。</p><div class="table-container"><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td><code>ios::fixed</code></td><td>总是输出浮点数。</td></tr><tr><td><code>ios::scientific</code></td><td>总是以科学计数法输出。</td></tr><tr><td><code>ios::left</code></td><td>左对齐。</td></tr><tr><td><code>ios::right</code></td><td>右对齐。</td></tr><tr><td><code>ios::skipws</code></td><td>忽略前导空格。</td></tr><tr><td><code>ios::showpos</code></td><td>正数前加 <code>+</code>。</td></tr><tr><td><code>ios::showpoint</code></td><td>总是显示小数点。</td></tr><tr><td><code>ios::uppercase</code></td><td>十进制以上的进制，输出用大写字母。</td></tr><tr><td><code>ios::lowercase</code></td><td>十进制以上的进制，输出用小写字母。</td></tr><tr><td><code>ios::showbase</code></td><td>输出进制（八进制前 <code>0</code>，十六进制前 <code>0x</code>）</td></tr></tbody></table></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout&lt;&lt;<span class="hljs-built_in">setiosflags</span>(ios::left)&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;<span class="hljs-number">1010</span>&lt;&lt;<span class="hljs-built_in">setw</span>(<span class="hljs-number">5</span>)&lt;&lt;<span class="hljs-number">92</span>&lt;&lt;endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：（最后有三个空格）</span><br><span class="hljs-comment">1010 92   </span><br><span class="hljs-comment">*/</span><br>cout&lt;&lt;<span class="hljs-built_in">setiosflags</span>(ios::showpos)&lt;&lt;<span class="hljs-number">998</span>&lt;&lt;endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">+998</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="setprecision-函数"><a href="#setprecision-函数" class="headerlink" title="setprecision() 函数"></a>setprecision() 函数</h3><p>设置精确到浮点数第几位。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>cout&lt;&lt;<span class="hljs-built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>)&lt;&lt;<span class="hljs-number">1.1451419</span>&lt;&lt;endl;<br><span class="hljs-comment">// 输出：1.1451</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 流 </tag>
            
            <tag> OI </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 排序 (sort) 常见类型与模板</title>
      <link href="/articles/cpp-sort.html/"/>
      <url>/articles/cpp-sort.html/</url>
      
        <content type="html"><![CDATA[<p>挺久之前的笔记<del>（还不如叫模板）</del>了</p><p><del>为什么浏览器会把这个当成挪威语页面啊</del></p><h2 id="排序-Sort"><a href="#排序-Sort" class="headerlink" title="排序 Sort"></a>排序 Sort</h2><h3 id="选择排序-Selection-Sort"><a href="#选择排序-Selection-Sort" class="headerlink" title="选择排序 Selection Sort"></a>选择排序 Selection Sort</h3><p>每 i 次找出第 i 小的元素，然后与第 i 个元素交换位置。</p><blockquote><p>不稳定</p><p>最好时间、平均时间、最坏时间 $O(n^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">// 长度为 len，下标从 1 开始的数组 a</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> p;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;len; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;=len; j++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[j]&lt;a[i]) p=j;<br>        &#125;<br>        std::<span class="hljs-built_in">swap</span>(a[i], a[p]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序-Bubble-Sort"><a href="#冒泡排序-Bubble-Sort" class="headerlink" title="冒泡排序 Bubble Sort"></a>冒泡排序 Bubble Sort</h3><p>每次检查相邻两个元素，若前面的元素与后面的元素满足给定的排序条件就交换。当没有相邻元素需要交换时，排序完成。</p><blockquote><p>不稳定</p><p>最好时间 $O(n)$</p><p>平均时间、最坏时间 $O(n^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">// 长度为 len，下标从 1 开始的数组 a</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span>(flag)<br>    &#123;<br>        flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(a[i]&gt;a[i+<span class="hljs-number">1</span>])<br>            &#123;<br>                flag=<span class="hljs-literal">true</span>;<br>                std::<span class="hljs-built_in">swap</span>(a[i], a[i+<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序-Insertion-Sort"><a href="#插入排序-Insertion-Sort" class="headerlink" title="插入排序 Insertion Sort"></a>插入排序 Insertion Sort</h3><p>从未排序数组中选择一个插入到已排序数组的正确位置。</p><blockquote><p>稳定</p><p>最好时间 $O(n)$</p><p>平均时间、最坏时间 $O(n^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> len)</span> <span class="hljs-comment">// 长度为 len，下标从 1 开始的数组 a</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]&lt;a[i<span class="hljs-number">-1</span>])<br>        &#123;<br>            <span class="hljs-type">int</span> t=a[i];<br>            <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>&amp;&amp;a[j]&gt;t)<br>            &#123;<br>                a[j+<span class="hljs-number">1</span>] = a[j];<br>                --j;<br>            &#125;<br>            a[j+<span class="hljs-number">1</span>]=t;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="计数排序-Counting-Sort"><a href="#计数排序-Counting-Sort" class="headerlink" title="计数排序 Counting Sort"></a>计数排序 Counting Sort</h3><p>使用一个额外的数组记录待排序数组中相同元素的个数，之后根据额外数组排序待排序数组。</p><blockquote><p>稳定</p><p>时间 $O(n+w)$ 其中 $w$ 代表待排序数组元素的取值域大小</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> W = <span class="hljs-number">100010</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">counting_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> c[W], b[N];<br>    <span class="hljs-built_in">memset</span>(c, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(c));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) ++c[a[i]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=w; i++) c[i]+=c[i<span class="hljs-number">-1</span>]; <span class="hljs-comment">// 前缀和</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=n; i&gt;=<span class="hljs-number">1</span>; i--) b[c[a[i]]--] = a[i];<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序-Radix-Sort"><a href="#基数排序-Radix-Sort" class="headerlink" title="基数排序 Radix Sort"></a>基数排序 Radix Sort</h3><p>将待排序的数组拆分成 k 个关键字，逐个比较关键字。</p><blockquote><p>稳定</p><p>时间 $O(kn+\sum_{i=1}^kw_i)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> W = <span class="hljs-number">100010</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> K = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">element</span><br>&#123;<br>    <span class="hljs-type">int</span> key[K];<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> element&amp; y) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=k;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(key[i]==y.key[i]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">return</span> key[i]&lt;y.key[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125; a[N], b[N];<br><br><span class="hljs-type">int</span> n, w[K], k, cnt[W];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">counting_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(cnt, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(cnt));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i) ++cnt[a[i].key[p]];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=w[p]; ++i) cnt[i]++cnt[i<span class="hljs-number">-1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=n; i&gt;=<span class="hljs-number">1</span>; --i) b[cnt[a[i].key[p]]--] = a[i];<br>    <span class="hljs-built_in">memcpy</span>(a, b, <span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">radix_sort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=k; i&gt;=<span class="hljs-number">1</span>; --i) <span class="hljs-built_in">counting_sort</span>(i);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序-Quicksort"><a href="#快速排序-Quicksort" class="headerlink" title="快速排序 Quicksort"></a>快速排序 Quicksort</h3><p>通过分治的方式来将一个数组排序。</p><blockquote><p>不稳定</p><p>最好时间、平均时间 $O(n\ log\ n)$</p><p>最坏时间 $O(n^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">range</span><br>&#123;<br>    <span class="hljs-type">int</span> start, end;<br>    <span class="hljs-built_in">range</span>(<span class="hljs-type">int</span> s=<span class="hljs-number">0</span>; <span class="hljs-type">int</span> e=<span class="hljs-number">0</span>) &#123;start=s, end=e;&#125;<br>&#125;;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quicksort</span><span class="hljs-params">(T arr[], <span class="hljs-type">const</span> <span class="hljs-type">int</span> len)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>    range r[len];<br>    <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>    r[p++] = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, len<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">while</span>(p)<br>    &#123;<br>        range ran = r[--p];<br>        <span class="hljs-keyword">if</span>(ran.start&gt;=ran.end) <span class="hljs-keyword">continue</span>;<br>        T mid = arr[ran.end];<br>        <span class="hljs-type">int</span> l = ran.start, r=ran.end<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(l&lt;r)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(arr[l]&lt;mid&amp;&amp;l&lt;r) l++:<br>            <span class="hljs-keyword">while</span>(arr[r]&gt;=mid&amp;l&lt;r) r--;<br>            std::<span class="hljs-built_in">swap</span>(arr[l], arr[ran.end]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[l]&gt;=arr[ran.end])<br>            std::<span class="hljs-built_in">swap</span>(arr[l], arr[ran.end]);<br>        <span class="hljs-keyword">else</span><br>            l++;<br>        r[p++] = <span class="hljs-built_in">range</span>(ran.start, l<span class="hljs-number">-1</span>);<br>        r[p++] = <span class="hljs-built_in">range</span>(l+<span class="hljs-number">1</span>, ran.end);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="归并排序-Merge-Sort"><a href="#归并排序-Merge-Sort" class="headerlink" title="归并排序 Merge Sort"></a>归并排序 Merge Sort</h3><p>通过给数组分段之后合并来排序。</p><blockquote><p>稳定</p><p>最好时间、平均时间、最坏时间 $O(n\ log\ n)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(r-l&lt;=<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> ;<br>    <span class="hljs-type">int</span> mid=l+((r-l)/<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">merge_sort</span>(l, mid), <span class="hljs-built_in">merge_sort</span>(mid, r);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=l, j=mid, k=l; k&lt;r; ++k)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(j==r||(i&lt;mid&amp;&amp;a[i]&lt;=a[j]))<br>            tmp[k]=a[i++];<br>        <span class="hljs-keyword">else</span><br>            tmp[k]=a[j++];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=l; i&lt;r; ++i) a[i]=tmp[i];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序-Heapsort"><a href="#堆排序-Heapsort" class="headerlink" title="堆排序 Heapsort"></a>堆排序 Heapsort</h3><p>堆排序是建立在堆上的选择排序。</p><blockquote><p>不稳定</p><p>最好时间、平均时间、最坏时间 $O(n\ log\ n)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sift_down</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123;<br>  <span class="hljs-type">int</span> parent = start;<br>  <span class="hljs-type">int</span> child = parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (child &lt;= end) &#123;<br>    <span class="hljs-keyword">if</span> (child + <span class="hljs-number">1</span> &lt;= end &amp;&amp; arr[child] &lt; arr[child + <span class="hljs-number">1</span>]) child++;<br>    <span class="hljs-keyword">if</span> (arr[parent] &gt;= arr[child])<br>      <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">swap</span>(arr[parent], arr[child]);<br>      parent = child;<br>      child = parent * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (len - <span class="hljs-number">1</span> - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) <span class="hljs-built_in">sift_down</span>(arr, i, len - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-built_in">swap</span>(arr[<span class="hljs-number">0</span>], arr[i]);<br>    <span class="hljs-built_in">sift_down</span>(arr, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="桶排序-Bucket-sort"><a href="#桶排序-Bucket-sort" class="headerlink" title="桶排序 Bucket sort"></a>桶排序 Bucket sort</h3><p>桶排序是建立在桶上的排序方法，适用于待排序数据值域较大但分布比较均匀的情况。</p><blockquote><p>稳定</p><p>最好时间、平均时间 $O(n+n^2/k+k)$</p><p>最坏时间 $O(n^2)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-type">int</span> n, w, a[N];<br>vector&lt;<span class="hljs-type">int</span>&gt; bucket[N];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertion_sort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; A)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; A.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>    <span class="hljs-type">int</span> key = A[i];<br>    <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; A[j] &gt; key) &#123;<br>      A[j + <span class="hljs-number">1</span>] = A[j];<br>      --j;<br>    &#125;<br>    A[j + <span class="hljs-number">1</span>] = key;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bucket_sort</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> bucket_size = w / n + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    bucket[i].<span class="hljs-built_in">clear</span>();<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>    bucket[a[i] / bucket_size].<span class="hljs-built_in">push_back</span>(a[i]);<br>  &#125;<br>  <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-built_in">insertion_sort</span>(bucket[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; bucket[i].<span class="hljs-built_in">size</span>(); ++j) &#123;<br>      a[++p] = bucket[i][j];<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序-Shell-sort"><a href="#希尔排序-Shell-sort" class="headerlink" title="希尔排序 Shell sort"></a>希尔排序 Shell sort</h3><p>希尔排序是插入排序的一种改进版本。</p><blockquote><p>不稳定</p><p>最好时间 $O(n)$</p><p>平均时间 $O(n^{3/2})$</p><p>最坏时间 $O(n\ log^2\ n)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(t array[]， <span class="hljs-type">int</span> length)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> h=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(h&lt;length/<span class="hljs-number">3</span>)<br>    &#123;<br>        h=<span class="hljs-number">3</span>*h+<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(h&gt;=<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h; i&lt;length; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&gt;=h&amp;&amp;array[j]&lt;array[j-h]; j-=h)<br>            &#123;<br>                std::<span class="hljs-built_in">swap</span>(array[j], array[j-h]);<br>            &#125;<br>        &#125;<br>        h/=<span class="hljs-number">3</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="锦标赛排序-Tournament-sort"><a href="#锦标赛排序-Tournament-sort" class="headerlink" title="锦标赛排序 Tournament sort"></a>锦标赛排序 Tournament sort</h3><p>两两比较，胜者进入下一轮。</p><p>类似于树。</p><blockquote><p>不稳定</p><p>最好时间、平均时间、最坏时间 $O(n\ log\ n)$</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, a[maxn], tmp[maxn &lt;&lt; <span class="hljs-number">1</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">winner</span><span class="hljs-params">(<span class="hljs-type">int</span> pos1, <span class="hljs-type">int</span> pos2)</span> </span>&#123;<br>  <span class="hljs-type">int</span> u = pos1 &gt;= n ? pos1 : tmp[pos1];<br>  <span class="hljs-type">int</span> v = pos2 &gt;= n ? pos2 : tmp[pos2];<br>  <span class="hljs-keyword">if</span> (tmp[u] &lt;= tmp[v]) <span class="hljs-keyword">return</span> u;<br>  <span class="hljs-keyword">return</span> v;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">creat_tree</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;value)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) tmp[n + i] = a[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-type">int</span> k = i / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>    tmp[k] = <span class="hljs-built_in">winner</span>(i, j);<br>  &#125;<br>  value = tmp[tmp[<span class="hljs-number">1</span>]];<br>  tmp[tmp[<span class="hljs-number">1</span>]] = INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recreat</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;value)</span> </span>&#123;<br>  <span class="hljs-type">int</span> i = tmp[<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> j, k = i / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &amp;&amp; i &lt; <span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>)<br>      j = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>      j = i - <span class="hljs-number">1</span>;<br>    tmp[k] = <span class="hljs-built_in">winner</span>(i, j);<br>    i = k;<br>  &#125;<br>  value = tmp[tmp[<span class="hljs-number">1</span>]];<br>  tmp[tmp[<span class="hljs-number">1</span>]] = INF;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tournament_sort</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> value;<br>  <span class="hljs-built_in">creat_tree</span>(value);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    a[i] = value;<br>    <span class="hljs-built_in">recreat</span>(value);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OI </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
